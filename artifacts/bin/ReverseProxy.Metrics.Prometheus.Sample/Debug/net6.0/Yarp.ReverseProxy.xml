<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Yarp.ReverseProxy</name>
    </assembly>
    <members>
        <member name="T:Yarp.ReverseProxy.Configuration.ActiveHealthCheckConfig">
            <summary>
            Active health check config.
            </summary>
        </member>
        <member name="P:Yarp.ReverseProxy.Configuration.ActiveHealthCheckConfig.Enabled">
            <summary>
            Whether active health checks are enabled.
            </summary>
        </member>
        <member name="P:Yarp.ReverseProxy.Configuration.ActiveHealthCheckConfig.Interval">
            <summary>
            Health probe interval.
            </summary>
        </member>
        <member name="P:Yarp.ReverseProxy.Configuration.ActiveHealthCheckConfig.Timeout">
            <summary>
            Health probe timeout, after which a destination is considered unhealthy.
            </summary>
        </member>
        <member name="P:Yarp.ReverseProxy.Configuration.ActiveHealthCheckConfig.Policy">
            <summary>
            Active health check policy.
            </summary>
        </member>
        <member name="P:Yarp.ReverseProxy.Configuration.ActiveHealthCheckConfig.Path">
            <summary>
            HTTP health check endpoint path.
            </summary>
        </member>
        <member name="T:Yarp.ReverseProxy.Configuration.ClusterConfig">
            <summary>
            A cluster is a group of equivalent endpoints and associated policies.
            </summary>
        </member>
        <member name="P:Yarp.ReverseProxy.Configuration.ClusterConfig.ClusterId">
            <summary>
            The Id for this cluster. This needs to be globally unique.
            This field is required.
            </summary>
        </member>
        <member name="P:Yarp.ReverseProxy.Configuration.ClusterConfig.LoadBalancingPolicy">
            <summary>
            Load balancing policy.
            </summary>
        </member>
        <member name="P:Yarp.ReverseProxy.Configuration.ClusterConfig.SessionAffinity">
            <summary>
            Session affinity config.
            </summary>
        </member>
        <member name="P:Yarp.ReverseProxy.Configuration.ClusterConfig.HealthCheck">
            <summary>
            Health checking config.
            </summary>
        </member>
        <member name="P:Yarp.ReverseProxy.Configuration.ClusterConfig.HttpClient">
            <summary>
            Config for the HTTP client that is used to call destinations in this cluster.
            </summary>
        </member>
        <member name="P:Yarp.ReverseProxy.Configuration.ClusterConfig.HttpRequest">
            <summary>
            Config for outgoing HTTP requests.
            </summary>
        </member>
        <member name="P:Yarp.ReverseProxy.Configuration.ClusterConfig.Destinations">
            <summary>
            The set of destinations associated with this cluster.
            </summary>
        </member>
        <member name="P:Yarp.ReverseProxy.Configuration.ClusterConfig.Metadata">
            <summary>
            Arbitrary key-value pairs that further describe this cluster.
            </summary>
        </member>
        <member name="T:Yarp.ReverseProxy.Configuration.ConfigProvider.ConfigurationConfigProvider">
            <summary>
            Reacts to configuration changes and applies configurations to the Reverse Proxy core.
            When configs are loaded from appsettings.json, this takes care of hot updates
            when appsettings.json is modified on disk.
            </summary>
        </member>
        <member name="T:Yarp.ReverseProxy.Configuration.DestinationConfig">
            <summary>
            Describes a destination of a cluster.
            </summary>
        </member>
        <member name="P:Yarp.ReverseProxy.Configuration.DestinationConfig.Address">
            <summary>
            Address of this destination. E.g. <c>https://127.0.0.1:123/abcd1234/</c>.
            This field is required.
            </summary>
        </member>
        <member name="P:Yarp.ReverseProxy.Configuration.DestinationConfig.Health">
            <summary>
            Endpoint accepting active health check probes. E.g. <c>http://127.0.0.1:1234/</c>.
            </summary>
        </member>
        <member name="P:Yarp.ReverseProxy.Configuration.DestinationConfig.Metadata">
            <summary>
            Arbitrary key-value pairs that further describe this destination.
            </summary>
        </member>
        <member name="T:Yarp.ReverseProxy.Configuration.HeaderMatchMode">
            <summary>
            How to match header values.
            </summary>
        </member>
        <member name="F:Yarp.ReverseProxy.Configuration.HeaderMatchMode.ExactHeader">
            <summary>
            Any of the headers with the given name must match in its entirety, subject to case sensitivity settings.
            If a header contains multiple values (separated by , or ;), they are split before matching.
            A single pair of quotes will also be stripped from the value before matching.
            </summary>
        </member>
        <member name="F:Yarp.ReverseProxy.Configuration.HeaderMatchMode.HeaderPrefix">
            <summary>
            Any of the headers with the given name must match by prefix, subject to case sensitivity settings.
            If a header contains multiple values (separated by , or ;), they are split before matching.
            A single pair of quotes will also be stripped from the value before matching.
            </summary>
        </member>
        <member name="F:Yarp.ReverseProxy.Configuration.HeaderMatchMode.Contains">
            <summary>
            Any of the headers with the given name must contain any of the match values, subject to case sensitivity settings.
            </summary>
        </member>
        <member name="F:Yarp.ReverseProxy.Configuration.HeaderMatchMode.NotContains">
            <summary>
            The header must exist and the value must be non-empty.
            None of the headers with the given name may contain any of the match values, subject to case sensitivity settings.
            </summary>
        </member>
        <member name="F:Yarp.ReverseProxy.Configuration.HeaderMatchMode.Exists">
            <summary>
            The header must exist and contain any non-empty value.
            If there are multiple headers with the same name, the rule will also match.
            </summary>
        </member>
        <member name="F:Yarp.ReverseProxy.Configuration.HeaderMatchMode.NotExists">
            <summary>
            The header must not exist.
            </summary>
        </member>
        <member name="T:Yarp.ReverseProxy.Configuration.HealthCheckConfig">
            <summary>
            All health check config.
            </summary>
        </member>
        <member name="P:Yarp.ReverseProxy.Configuration.HealthCheckConfig.Passive">
            <summary>
            Passive health check config.
            </summary>
        </member>
        <member name="P:Yarp.ReverseProxy.Configuration.HealthCheckConfig.Active">
            <summary>
            Active health check config.
            </summary>
        </member>
        <member name="P:Yarp.ReverseProxy.Configuration.HealthCheckConfig.AvailableDestinationsPolicy">
            <summary>
            Available destinations policy.
            </summary>
        </member>
        <member name="T:Yarp.ReverseProxy.Configuration.HttpClientConfig">
            <summary>
            Options used for communicating with the destination servers.
            </summary>
        </member>
        <member name="F:Yarp.ReverseProxy.Configuration.HttpClientConfig.Empty">
            <summary>
            An empty options instance.
            </summary>
        </member>
        <member name="P:Yarp.ReverseProxy.Configuration.HttpClientConfig.SslProtocols">
            <summary>
            What TLS protocols to use.
            </summary>
        </member>
        <member name="P:Yarp.ReverseProxy.Configuration.HttpClientConfig.DangerousAcceptAnyServerCertificate">
            <summary>
            Indicates if destination server https certificate errors should be ignored.
            This should only be done when using self-signed certificates.
            </summary>
        </member>
        <member name="P:Yarp.ReverseProxy.Configuration.HttpClientConfig.MaxConnectionsPerServer">
            <summary>
            Limits the number of connections used when communicating with the destination server.
            </summary>
        </member>
        <member name="P:Yarp.ReverseProxy.Configuration.HttpClientConfig.WebProxy">
            <summary>
            Optional web proxy used when communicating with the destination server. 
            </summary>
        </member>
        <member name="P:Yarp.ReverseProxy.Configuration.HttpClientConfig.EnableMultipleHttp2Connections">
            <summary>
            Gets or sets a value that indicates whether additional HTTP/2 connections can
            be established to the same server when the maximum number of concurrent streams
            is reached on all existing connections.
            </summary>
        </member>
        <member name="P:Yarp.ReverseProxy.Configuration.HttpClientConfig.RequestHeaderEncoding">
            <summary>
            Enables non-ASCII header encoding for outgoing requests.
            </summary>
        </member>
        <member name="T:Yarp.ReverseProxy.Configuration.IConfigChangeListener">
            <summary>
            Allows subscribing to events notifying you when the configuration is loaded and applied, or when those actions fail.
            </summary>
        </member>
        <member name="M:Yarp.ReverseProxy.Configuration.IConfigChangeListener.ConfigurationLoadingFailed(Yarp.ReverseProxy.Configuration.IProxyConfigProvider,System.Exception)">
            <summary>
            Invoked when an error occurs while loading the configuration.
            </summary>
            <param name="configProvider">The instance of the configuration provider that failed to provide the configuration.</param>
            <param name="exception">The thrown exception.</param>
        </member>
        <member name="M:Yarp.ReverseProxy.Configuration.IConfigChangeListener.ConfigurationLoaded(System.Collections.Generic.IReadOnlyList{Yarp.ReverseProxy.Configuration.IProxyConfig})">
            <summary>
            Invoked once the configuration have been successfully loaded.
            </summary>
            <param name="proxyConfigs">The list of instances that have been loaded.</param>
        </member>
        <member name="M:Yarp.ReverseProxy.Configuration.IConfigChangeListener.ConfigurationApplyingFailed(System.Collections.Generic.IReadOnlyList{Yarp.ReverseProxy.Configuration.IProxyConfig},System.Exception)">
            <summary>
            Invoked when an error occurs while applying the configuration.
            </summary>
            <param name="proxyConfigs">The list of instances that were being processed.</param>
            <param name="exception">The thrown exception.</param>
        </member>
        <member name="M:Yarp.ReverseProxy.Configuration.IConfigChangeListener.ConfigurationApplied(System.Collections.Generic.IReadOnlyList{Yarp.ReverseProxy.Configuration.IProxyConfig})">
            <summary>
            Invoked once the configuration has been successfully applied.
            </summary>
            <param name="proxyConfigs">The list of instances that have been applied.</param>
        </member>
        <member name="T:Yarp.ReverseProxy.Configuration.IConfigValidator">
            <summary>
            Provides methods to validate routes and clusters.
            </summary>
        </member>
        <member name="M:Yarp.ReverseProxy.Configuration.IConfigValidator.ValidateRouteAsync(Yarp.ReverseProxy.Configuration.RouteConfig)">
            <summary>
            Validates a route and returns all errors
            </summary>
        </member>
        <member name="M:Yarp.ReverseProxy.Configuration.IConfigValidator.ValidateClusterAsync(Yarp.ReverseProxy.Configuration.ClusterConfig)">
            <summary>
            Validates a cluster and returns all errors.
            </summary>
        </member>
        <member name="T:Yarp.ReverseProxy.Configuration.InMemoryConfigProvider">
            <summary>
            Provides an implementation of IProxyConfigProvider to support config being generated by code.
            </summary>
        </member>
        <member name="M:Yarp.ReverseProxy.Configuration.InMemoryConfigProvider.#ctor(System.Collections.Generic.IReadOnlyList{Yarp.ReverseProxy.Configuration.RouteConfig},System.Collections.Generic.IReadOnlyList{Yarp.ReverseProxy.Configuration.ClusterConfig})">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="M:Yarp.ReverseProxy.Configuration.InMemoryConfigProvider.#ctor(System.Collections.Generic.IReadOnlyList{Yarp.ReverseProxy.Configuration.RouteConfig},System.Collections.Generic.IReadOnlyList{Yarp.ReverseProxy.Configuration.ClusterConfig},System.String)">
            <summary>
            Creates a new instance, specifying a revision id of the configuration.
            </summary>
        </member>
        <member name="M:Yarp.ReverseProxy.Configuration.InMemoryConfigProvider.GetConfig">
            <summary>
            Implementation of the IProxyConfigProvider.GetConfig method to supply the current snapshot of configuration
            </summary>
            <returns>An immutable snapshot of the current configuration state</returns>
        </member>
        <member name="M:Yarp.ReverseProxy.Configuration.InMemoryConfigProvider.Update(System.Collections.Generic.IReadOnlyList{Yarp.ReverseProxy.Configuration.RouteConfig},System.Collections.Generic.IReadOnlyList{Yarp.ReverseProxy.Configuration.ClusterConfig})">
            <summary>
            Swaps the config state with a new snapshot of the configuration, then signals that the old one is outdated.
            </summary>
        </member>
        <member name="M:Yarp.ReverseProxy.Configuration.InMemoryConfigProvider.Update(System.Collections.Generic.IReadOnlyList{Yarp.ReverseProxy.Configuration.RouteConfig},System.Collections.Generic.IReadOnlyList{Yarp.ReverseProxy.Configuration.ClusterConfig},System.String)">
            <summary>
            Swaps the config state with a new snapshot of the configuration, then signals that the old one is outdated.
            </summary>
        </member>
        <member name="T:Yarp.ReverseProxy.Configuration.InMemoryConfigProvider.InMemoryConfig">
            <summary>
            Implementation of IProxyConfig which is a snapshot of the current config state. The data for this class should be immutable.
            </summary>
        </member>
        <member name="P:Yarp.ReverseProxy.Configuration.InMemoryConfigProvider.InMemoryConfig.RevisionId">
            <inheritdoc/>
        </member>
        <member name="P:Yarp.ReverseProxy.Configuration.InMemoryConfigProvider.InMemoryConfig.Routes">
            <summary>
            A snapshot of the list of routes for the proxy
            </summary>
        </member>
        <member name="P:Yarp.ReverseProxy.Configuration.InMemoryConfigProvider.InMemoryConfig.Clusters">
            <summary>
            A snapshot of the list of Clusters which are collections of interchangable destination endpoints
            </summary>
        </member>
        <member name="P:Yarp.ReverseProxy.Configuration.InMemoryConfigProvider.InMemoryConfig.ChangeToken">
            <summary>
            Fired to indicate the the proxy state has changed, and that this snapshot is now stale
            </summary>
        </member>
        <member name="T:Yarp.ReverseProxy.Configuration.IProxyConfig">
            <summary>
            Represents a snapshot of proxy configuration data. These properties may be accessed multiple times and should not be modified.
            </summary>
        </member>
        <member name="P:Yarp.ReverseProxy.Configuration.IProxyConfig.RevisionId">
            <summary>
            A unique identifier for this revision of the configuration.
            </summary>
        </member>
        <member name="P:Yarp.ReverseProxy.Configuration.IProxyConfig.Routes">
            <summary>
            Routes matching requests to clusters.
            </summary>
        </member>
        <member name="P:Yarp.ReverseProxy.Configuration.IProxyConfig.Clusters">
            <summary>
            Cluster information for where to proxy requests to.
            </summary>
        </member>
        <member name="P:Yarp.ReverseProxy.Configuration.IProxyConfig.ChangeToken">
            <summary>
            A notification that triggers when this snapshot expires.
            </summary>
        </member>
        <member name="T:Yarp.ReverseProxy.Configuration.IProxyConfigFilter">
            <summary>
            A configuration filter that will run each time the proxy configuration is loaded.
            </summary>
        </member>
        <member name="M:Yarp.ReverseProxy.Configuration.IProxyConfigFilter.ConfigureClusterAsync(Yarp.ReverseProxy.Configuration.ClusterConfig,System.Threading.CancellationToken)">
            <summary>
            Allows modification of a cluster configuration.
            </summary>
            <param name="cluster">The <see cref="T:Yarp.ReverseProxy.Configuration.ClusterConfig"/> instance to configure.</param>
            <param name="cancel"></param>
        </member>
        <member name="M:Yarp.ReverseProxy.Configuration.IProxyConfigFilter.ConfigureRouteAsync(Yarp.ReverseProxy.Configuration.RouteConfig,Yarp.ReverseProxy.Configuration.ClusterConfig,System.Threading.CancellationToken)">
            <summary>
            Allows modification of a route configuration.
            </summary>
            <param name="route">The <see cref="T:Yarp.ReverseProxy.Configuration.RouteConfig"/> instance to configure.</param>
            <param name="cluster">The <see cref="T:Yarp.ReverseProxy.Configuration.ClusterConfig"/> instance related to <see cref="T:Yarp.ReverseProxy.Configuration.RouteConfig"/>.</param>
            <param name="cancel"></param>
        </member>
        <member name="T:Yarp.ReverseProxy.Configuration.IProxyConfigProvider">
            <summary>
            A data source for proxy route and cluster information.
            </summary>
        </member>
        <member name="M:Yarp.ReverseProxy.Configuration.IProxyConfigProvider.GetConfig">
            <summary>
            Returns the current route and cluster data.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Yarp.ReverseProxy.Configuration.PassiveHealthCheckConfig">
            <summary>
            Passive health check config.
            </summary>
        </member>
        <member name="P:Yarp.ReverseProxy.Configuration.PassiveHealthCheckConfig.Enabled">
            <summary>
            Whether passive health checks are enabled.
            </summary>
        </member>
        <member name="P:Yarp.ReverseProxy.Configuration.PassiveHealthCheckConfig.Policy">
            <summary>
            Passive health check policy.
            </summary>
        </member>
        <member name="P:Yarp.ReverseProxy.Configuration.PassiveHealthCheckConfig.ReactivationPeriod">
            <summary>
            Destination reactivation period after which an unhealthy destination is considered healthy again.
            </summary>
        </member>
        <member name="T:Yarp.ReverseProxy.Configuration.QueryParameterMatchMode">
            <summary>
            How to match Query Parameter values.
            </summary>
        </member>
        <member name="F:Yarp.ReverseProxy.Configuration.QueryParameterMatchMode.Exact">
            <summary>
            Query string must match in its entirety,
            Subject to case sensitivity settings.
            Only single query parameter name supported. If there are multiple query parameters with the same name then the match fails.
            </summary>
        </member>
        <member name="F:Yarp.ReverseProxy.Configuration.QueryParameterMatchMode.Contains">
            <summary>
            Query string key must be present and substring must match for each of the respective query string values.
            Subject to case sensitivity settings.
            Only single query parameter name supported. If there are multiple query parameters with the same name then the match fails.
            </summary>
        </member>
        <member name="F:Yarp.ReverseProxy.Configuration.QueryParameterMatchMode.NotContains">
            <summary>
            Query string key must be present and value must not match for each of the respective query string values.
            Subject to case sensitivity settings.
            If there are multiple values then it needs to not contain ANY of the values 
            Only single query parameter name supported. If there are multiple query parameters with the same name then the match fails.
            </summary>
        </member>
        <member name="F:Yarp.ReverseProxy.Configuration.QueryParameterMatchMode.Prefix">
            <summary>
            Query string key must be present and prefix must match for each of the respective query string values.
            Subject to case sensitivity settings.
            Only single query parameter name supported. If there are multiple query parameters with the same name then the match fails.
            </summary>
        </member>
        <member name="F:Yarp.ReverseProxy.Configuration.QueryParameterMatchMode.Exists">
            <summary>
            Query string key must exist and contain any non-empty value.
            </summary>
        </member>
        <member name="T:Yarp.ReverseProxy.Configuration.RouteConfig">
            <summary>
            Describes a route that matches incoming requests based on the <see cref="P:Yarp.ReverseProxy.Configuration.RouteConfig.Match"/> criteria
            and proxies matching requests to the cluster identified by its <see cref="P:Yarp.ReverseProxy.Configuration.RouteConfig.ClusterId"/>.
            </summary>
        </member>
        <member name="P:Yarp.ReverseProxy.Configuration.RouteConfig.RouteId">
            <summary>
            Globally unique identifier of the route.
            This field is required.
            </summary>
        </member>
        <member name="P:Yarp.ReverseProxy.Configuration.RouteConfig.Match">
            <summary>
            Parameters used to match requests.
            This field is required.
            </summary>
        </member>
        <member name="P:Yarp.ReverseProxy.Configuration.RouteConfig.Order">
            <summary>
            Optionally, an order value for this route. Routes with lower numbers take precedence over higher numbers.
            </summary>
        </member>
        <member name="P:Yarp.ReverseProxy.Configuration.RouteConfig.ClusterId">
            <summary>
            Gets or sets the cluster that requests matching this route
            should be proxied to.
            </summary>
        </member>
        <member name="P:Yarp.ReverseProxy.Configuration.RouteConfig.AuthorizationPolicy">
            <summary>
            The name of the AuthorizationPolicy to apply to this route.
            If not set then only the FallbackPolicy will apply.
            Set to "Default" to enable authorization with the applications default policy.
            Set to "Anonymous" to disable all authorization checks for this route.
            </summary>
        </member>
        <member name="P:Yarp.ReverseProxy.Configuration.RouteConfig.CorsPolicy">
            <summary>
            The name of the CorsPolicy to apply to this route.
            If not set then the route won't be automatically matched for cors preflight requests.
            Set to "Default" to enable cors with the default policy.
            Set to "Disable" to refuses cors requests for this route.
            </summary>
        </member>
        <member name="P:Yarp.ReverseProxy.Configuration.RouteConfig.MaxRequestBodySize">
            <summary>
            An optional override for how large request bodies can be in bytes. If set, this overrides the server's default (30MB) per request.
            Set to '-1' to disable the limit for this route.
            </summary>
        </member>
        <member name="P:Yarp.ReverseProxy.Configuration.RouteConfig.Metadata">
            <summary>
            Arbitrary key-value pairs that further describe this route.
            </summary>
        </member>
        <member name="P:Yarp.ReverseProxy.Configuration.RouteConfig.Transforms">
            <summary>
            Parameters used to transform the request and response. See <see cref="T:Yarp.ReverseProxy.Transforms.Builder.ITransformBuilder"/>.
            </summary>
        </member>
        <member name="T:Yarp.ReverseProxy.Configuration.RouteHeader">
            <summary>
            Route criteria for a header that must be present on the incoming request.
            </summary>
        </member>
        <member name="P:Yarp.ReverseProxy.Configuration.RouteHeader.Name">
            <summary>
            Name of the header to look for.
            This field is case insensitive and required.
            </summary>
        </member>
        <member name="P:Yarp.ReverseProxy.Configuration.RouteHeader.Values">
            <summary>
            A collection of acceptable header values used during routing. Only one value must match.
            The list must not be empty unless using <see cref="F:Yarp.ReverseProxy.Configuration.HeaderMatchMode.Exists"/> or <see cref="F:Yarp.ReverseProxy.Configuration.HeaderMatchMode.NotExists"/>.
            </summary>
        </member>
        <member name="P:Yarp.ReverseProxy.Configuration.RouteHeader.Mode">
            <summary>
            Specifies how header values should be compared (e.g. exact matches Vs. by prefix).
            Defaults to <see cref="F:Yarp.ReverseProxy.Configuration.HeaderMatchMode.ExactHeader"/>.
            </summary>
        </member>
        <member name="P:Yarp.ReverseProxy.Configuration.RouteHeader.IsCaseSensitive">
            <summary>
            Specifies whether header value comparisons should ignore case.
            When <c>true</c>, <see cref="F:System.StringComparison.Ordinal" /> is used.
            When <c>false</c>, <see cref="F:System.StringComparison.OrdinalIgnoreCase" /> is used.
            Defaults to <c>false</c>.
            </summary>
        </member>
        <member name="T:Yarp.ReverseProxy.Configuration.RouteMatch">
            <summary>
            Describes the matching criteria for a route.
            </summary>
        </member>
        <member name="P:Yarp.ReverseProxy.Configuration.RouteMatch.Methods">
            <summary>
            Only match requests that use these optional HTTP methods. E.g. GET, POST.
            </summary>
        </member>
        <member name="P:Yarp.ReverseProxy.Configuration.RouteMatch.Hosts">
            <summary>
            Only match requests with the given Host header.
            Supports wildcards and ports. For unicode host names, do not use punycode.
            </summary>
        </member>
        <member name="P:Yarp.ReverseProxy.Configuration.RouteMatch.Path">
            <summary>
            Only match requests with the given Path pattern.
            </summary>
        </member>
        <member name="P:Yarp.ReverseProxy.Configuration.RouteMatch.QueryParameters">
            <summary>
            Only match requests that contain all of these query parameters.
            </summary>
        </member>
        <member name="P:Yarp.ReverseProxy.Configuration.RouteMatch.Headers">
            <summary>
            Only match requests that contain all of these headers.
            </summary>
        </member>
        <member name="T:Yarp.ReverseProxy.Configuration.RouteQueryParameter">
            <summary>
            Route criteria for a query parameter that must be present on the incoming request.
            </summary>
        </member>
        <member name="P:Yarp.ReverseProxy.Configuration.RouteQueryParameter.Name">
            <summary>
            Name of the query parameter to look for.
            This field is case insensitive and required.
            </summary>
        </member>
        <member name="P:Yarp.ReverseProxy.Configuration.RouteQueryParameter.Values">
            <summary>
            A collection of acceptable query parameter values used during routing.
            </summary>
        </member>
        <member name="P:Yarp.ReverseProxy.Configuration.RouteQueryParameter.Mode">
            <summary>
            Specifies how query parameter values should be compared (e.g. exact matches Vs. contains).
            Defaults to <see cref="F:Yarp.ReverseProxy.Configuration.QueryParameterMatchMode.Exact"/>.
            </summary>
        </member>
        <member name="P:Yarp.ReverseProxy.Configuration.RouteQueryParameter.IsCaseSensitive">
            <summary>
            Specifies whether query parameter value comparisons should ignore case.
            When <c>true</c>, <see cref="F:System.StringComparison.Ordinal" /> is used.
            When <c>false</c>, <see cref="F:System.StringComparison.OrdinalIgnoreCase" /> is used.
            Defaults to <c>false</c>.
            </summary>
        </member>
        <member name="T:Yarp.ReverseProxy.Configuration.SessionAffinityConfig">
            <summary>
            Session affinity options.
            </summary>
        </member>
        <member name="P:Yarp.ReverseProxy.Configuration.SessionAffinityConfig.Enabled">
            <summary>
            Indicates whether session affinity is enabled.
            </summary>
        </member>
        <member name="P:Yarp.ReverseProxy.Configuration.SessionAffinityConfig.Policy">
            <summary>
            The session affinity policy to use.
            </summary>
        </member>
        <member name="P:Yarp.ReverseProxy.Configuration.SessionAffinityConfig.FailurePolicy">
            <summary>
            Strategy handling missing destination for an affinitized request.
            </summary>
        </member>
        <member name="P:Yarp.ReverseProxy.Configuration.SessionAffinityConfig.AffinityKeyName">
            <summary>
            Identifies the name of the field where the affinity value is stored.
            For the cookie affinity policy this will be the cookie name.
            For the header affinity policy this will be the header name.
            The policy will give its own default if no value is set.
            This value should be unique across clusters to avoid affinity conflicts.
            https://github.com/microsoft/reverse-proxy/issues/976
            This field is required.
            </summary>
        </member>
        <member name="P:Yarp.ReverseProxy.Configuration.SessionAffinityConfig.Cookie">
            <summary>
            Configuration of a cookie storing the session affinity key in case
            the <see cref="P:Yarp.ReverseProxy.Configuration.SessionAffinityConfig.Policy"/> is set to 'Cookie'.
            </summary>
        </member>
        <member name="T:Yarp.ReverseProxy.Configuration.SessionAffinityCookieConfig">
            <summary>
            Config for session affinity cookies.
            </summary>
        </member>
        <member name="P:Yarp.ReverseProxy.Configuration.SessionAffinityCookieConfig.Path">
            <summary>
            The cookie path.
            </summary>
        </member>
        <member name="P:Yarp.ReverseProxy.Configuration.SessionAffinityCookieConfig.Domain">
            <summary>
            The domain to associate the cookie with.
            </summary>
        </member>
        <member name="P:Yarp.ReverseProxy.Configuration.SessionAffinityCookieConfig.HttpOnly">
            <summary>
            Indicates whether a cookie is accessible by client-side script.
            </summary>
            <remarks>Defaults to "true".</remarks>
        </member>
        <member name="P:Yarp.ReverseProxy.Configuration.SessionAffinityCookieConfig.SecurePolicy">
            <summary>
            The policy that will be used to determine <see cref="P:Microsoft.AspNetCore.Http.CookieOptions.Secure"/>.
            </summary>
            <remarks>Defaults to <see cref="F:Microsoft.AspNetCore.Http.CookieSecurePolicy.None"/>.</remarks>
        </member>
        <member name="P:Yarp.ReverseProxy.Configuration.SessionAffinityCookieConfig.SameSite">
            <summary>
            The SameSite attribute of the cookie.
            </summary>
            <remarks>Defaults to <see cref="F:Microsoft.AspNetCore.Http.SameSiteMode.Unspecified"/>.</remarks>
        </member>
        <member name="P:Yarp.ReverseProxy.Configuration.SessionAffinityCookieConfig.Expiration">
            <summary>
            Gets or sets the lifespan of a cookie.
            </summary>
        </member>
        <member name="P:Yarp.ReverseProxy.Configuration.SessionAffinityCookieConfig.MaxAge">
            <summary>
            Gets or sets the max-age for the cookie.
            </summary>
        </member>
        <member name="P:Yarp.ReverseProxy.Configuration.SessionAffinityCookieConfig.IsEssential">
            <summary>
            Indicates if this cookie is essential for the application to function correctly. If true then
            consent policy checks may be bypassed.
            </summary>
            <remarks>Defaults to "false".</remarks>
        </member>
        <member name="T:Yarp.ReverseProxy.Configuration.WebProxyConfig">
            <summary>
            Config used to construct <seealso cref="T:System.Net.WebProxy"/> instance.
            </summary>
        </member>
        <member name="P:Yarp.ReverseProxy.Configuration.WebProxyConfig.Address">
            <summary>
            The URI of the proxy server.
            </summary>
        </member>
        <member name="P:Yarp.ReverseProxy.Configuration.WebProxyConfig.BypassOnLocal">
            <summary>
            true to bypass the proxy for local addresses; otherwise, false.
            If null, default value will be used: false
            </summary>
        </member>
        <member name="P:Yarp.ReverseProxy.Configuration.WebProxyConfig.UseDefaultCredentials">
            <summary>
            Controls whether the <seealso cref="P:System.Net.CredentialCache.DefaultCredentials"/> are sent with requests.
            If null, default value will be used: false
            </summary>
        </member>
        <member name="M:Yarp.ReverseProxy.Delegation.IHttpSysDelegator.ResetQueue(System.String,System.String)">
            <summary>
            Disposes the handle to the given queue if it exists.
            </summary>
            <remarks>
            If any destinations still reference the queue, the handle will be
            re-created the next time a request is routed to one of the destinations.
            </remarks>
            <param name="queueName">The name of the queue to reset.</param>
            <param name="urlPrefix">The url prefix of the queue to reset.</param>
        </member>
        <member name="T:Yarp.ReverseProxy.Forwarder.ForwarderError">
            <summary>
            Errors reported when forwarding a request to the destination.
            </summary>
        </member>
        <member name="F:Yarp.ReverseProxy.Forwarder.ForwarderError.None">
            <summary>
            No error.
            </summary>
        </member>
        <member name="F:Yarp.ReverseProxy.Forwarder.ForwarderError.Request">
            <summary>
            Failed to connect, send the request headers, or receive the response headers.
            </summary>
        </member>
        <member name="F:Yarp.ReverseProxy.Forwarder.ForwarderError.RequestTimedOut">
            <summary>
            Timed out when trying to connect, send the request headers, or receive the response headers.
            </summary>
        </member>
        <member name="F:Yarp.ReverseProxy.Forwarder.ForwarderError.RequestCanceled">
            <summary>
            Canceled when trying to connect, send the request headers, or receive the response headers.
            </summary>
        </member>
        <member name="F:Yarp.ReverseProxy.Forwarder.ForwarderError.RequestBodyCanceled">
            <summary>
            Canceled while copying the request body.
            </summary>
        </member>
        <member name="F:Yarp.ReverseProxy.Forwarder.ForwarderError.RequestBodyClient">
            <summary>
            Failed reading the request body from the client.
            </summary>
        </member>
        <member name="F:Yarp.ReverseProxy.Forwarder.ForwarderError.RequestBodyDestination">
            <summary>
            Failed writing the request body to the destination.
            </summary>
        </member>
        <member name="F:Yarp.ReverseProxy.Forwarder.ForwarderError.ResponseHeaders">
            <summary>
            Failed to copy response headers.
            </summary>
        </member>
        <member name="F:Yarp.ReverseProxy.Forwarder.ForwarderError.ResponseBodyCanceled">
            <summary>
            Canceled while copying the response body.
            </summary>
        </member>
        <member name="F:Yarp.ReverseProxy.Forwarder.ForwarderError.ResponseBodyClient">
            <summary>
            Failed when writing response body to the client.
            </summary>
        </member>
        <member name="F:Yarp.ReverseProxy.Forwarder.ForwarderError.ResponseBodyDestination">
            <summary>
            Failed when reading response body from the destination.
            </summary>
        </member>
        <member name="F:Yarp.ReverseProxy.Forwarder.ForwarderError.UpgradeRequestCanceled">
            <summary>
            Canceled while copying the upgraded response body.
            </summary>
        </member>
        <member name="F:Yarp.ReverseProxy.Forwarder.ForwarderError.UpgradeRequestClient">
            <summary>
            Failed reading the upgraded request body from the client.
            </summary>
        </member>
        <member name="F:Yarp.ReverseProxy.Forwarder.ForwarderError.UpgradeRequestDestination">
            <summary>
            Failed writing the upgraded request body to the destination.
            </summary>
        </member>
        <member name="F:Yarp.ReverseProxy.Forwarder.ForwarderError.UpgradeResponseCanceled">
            <summary>
            Canceled while copying the upgraded response body.
            </summary>
        </member>
        <member name="F:Yarp.ReverseProxy.Forwarder.ForwarderError.UpgradeResponseClient">
            <summary>
            Failed when writing the upgraded response body to the client.
            </summary>
        </member>
        <member name="F:Yarp.ReverseProxy.Forwarder.ForwarderError.UpgradeResponseDestination">
            <summary>
            Failed when reading the upgraded response body from the destination.
            </summary>
        </member>
        <member name="F:Yarp.ReverseProxy.Forwarder.ForwarderError.NoAvailableDestinations">
            <summary>
            Indicates there were no destinations remaining to proxy the request to.
            The configured destinations may have been excluded due to heath or other considerations.
            </summary>
        </member>
        <member name="F:Yarp.ReverseProxy.Forwarder.ForwarderError.RequestCreation">
            <summary>
            Failed while creating the request message.
            </summary>
        </member>
        <member name="P:Yarp.ReverseProxy.Forwarder.ForwarderErrorFeature.Error">
            <summary>
            The specified ForwarderError.
            </summary>
        </member>
        <member name="P:Yarp.ReverseProxy.Forwarder.ForwarderErrorFeature.Exception">
            <summary>
            The error, if any.
            </summary>
        </member>
        <member name="T:Yarp.ReverseProxy.Forwarder.ForwarderHttpClientContext">
            <summary>
            Contains the old and the new HTTP client configurations.
            </summary>
        </member>
        <member name="P:Yarp.ReverseProxy.Forwarder.ForwarderHttpClientContext.ClusterId">
            <summary>
            Id of a <see cref="T:Yarp.ReverseProxy.Model.ClusterModel"/> HTTP client belongs to.
            </summary>
        </member>
        <member name="P:Yarp.ReverseProxy.Forwarder.ForwarderHttpClientContext.OldConfig">
            <summary>
            Old <see cref="T:Yarp.ReverseProxy.Configuration.HttpClientConfig"/> instance
            from which the <see cref="P:Yarp.ReverseProxy.Forwarder.ForwarderHttpClientContext.OldClient"/> was created.
            Can be empty if a client is getting constructed for the first time.
            </summary>
        </member>
        <member name="P:Yarp.ReverseProxy.Forwarder.ForwarderHttpClientContext.OldMetadata">
            <summary>
            Old metadata instance from which the <see cref="P:Yarp.ReverseProxy.Forwarder.ForwarderHttpClientContext.OldClient"/> was created, if any.
            </summary>
        </member>
        <member name="P:Yarp.ReverseProxy.Forwarder.ForwarderHttpClientContext.OldClient">
            <summary>
            Old <see cref="T:System.Net.Http.HttpMessageInvoker"/> instance.
            Can be null if a client is getting constructed for the first time.
            </summary>
        </member>
        <member name="P:Yarp.ReverseProxy.Forwarder.ForwarderHttpClientContext.NewConfig">
            <summary>
            New <see cref="T:Yarp.ReverseProxy.Configuration.HttpClientConfig"/> instance
            specifying the settings for a new client.
            </summary>
        </member>
        <member name="P:Yarp.ReverseProxy.Forwarder.ForwarderHttpClientContext.NewMetadata">
            <summary>
            New metadata instance used for a new client construction, if any.
            </summary>
        </member>
        <member name="T:Yarp.ReverseProxy.Forwarder.ForwarderHttpClientFactory">
            <summary>
            Default implementation of <see cref="T:Yarp.ReverseProxy.Forwarder.IForwarderHttpClientFactory"/>.
            </summary>
        </member>
        <member name="M:Yarp.ReverseProxy.Forwarder.ForwarderHttpClientFactory.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Yarp.ReverseProxy.Forwarder.ForwarderHttpClientFactory"/> class.
            </summary>
        </member>
        <member name="M:Yarp.ReverseProxy.Forwarder.ForwarderHttpClientFactory.#ctor(Microsoft.Extensions.Logging.ILogger{Yarp.ReverseProxy.Forwarder.ForwarderHttpClientFactory})">
            <summary>
            Initializes a new instance of the <see cref="T:Yarp.ReverseProxy.Forwarder.ForwarderHttpClientFactory"/> class.
            </summary>
        </member>
        <member name="M:Yarp.ReverseProxy.Forwarder.ForwarderHttpClientFactory.CreateClient(Yarp.ReverseProxy.Forwarder.ForwarderHttpClientContext)">
            <inheritdoc/>
        </member>
        <member name="M:Yarp.ReverseProxy.Forwarder.ForwarderHttpClientFactory.CanReuseOldClient(Yarp.ReverseProxy.Forwarder.ForwarderHttpClientContext)">
            <summary>
            Checks if the options have changed since the old client was created. If not then the
            old client will be re-used. Re-use can avoid the latency of creating new connections.
            </summary>
        </member>
        <member name="M:Yarp.ReverseProxy.Forwarder.ForwarderHttpClientFactory.ConfigureHandler(Yarp.ReverseProxy.Forwarder.ForwarderHttpClientContext,System.Net.Http.SocketsHttpHandler)">
            <summary>
            Allows configuring the <see cref="T:System.Net.Http.SocketsHttpHandler"/> instance. The base implementation
            applies settings from <see cref="P:Yarp.ReverseProxy.Forwarder.ForwarderHttpClientContext.NewConfig"/>.
            <see cref="P:System.Net.Http.SocketsHttpHandler.UseProxy"/>, <see cref="P:System.Net.Http.SocketsHttpHandler.AllowAutoRedirect"/>,
            <see cref="P:System.Net.Http.SocketsHttpHandler.AutomaticDecompression"/>, and <see cref="P:System.Net.Http.SocketsHttpHandler.UseCookies"/>
            are disabled prior to this call.
            </summary>
        </member>
        <member name="M:Yarp.ReverseProxy.Forwarder.ForwarderHttpClientFactory.WrapHandler(Yarp.ReverseProxy.Forwarder.ForwarderHttpClientContext,System.Net.Http.HttpMessageHandler)">
            <summary>
            Adds any wrapping middleware around the <see cref="T:System.Net.Http.HttpMessageHandler"/>.
            </summary>
        </member>
        <member name="T:Yarp.ReverseProxy.Forwarder.ForwarderMiddleware">
            <summary>
            Invokes the proxy at the end of the request processing pipeline.
            </summary>
        </member>
        <member name="M:Yarp.ReverseProxy.Forwarder.ForwarderMiddleware.Invoke(Microsoft.AspNetCore.Http.HttpContext)">
            <inheritdoc/>
        </member>
        <member name="T:Yarp.ReverseProxy.Forwarder.ForwarderRequestConfig">
            <summary>
            Config for <see cref="M:Yarp.ReverseProxy.Forwarder.IHttpForwarder.SendAsync(Microsoft.AspNetCore.Http.HttpContext,System.String,System.Net.Http.HttpMessageInvoker,Yarp.ReverseProxy.Forwarder.ForwarderRequestConfig,Yarp.ReverseProxy.Forwarder.HttpTransformer,System.Threading.CancellationToken)"/>
            </summary>
        </member>
        <member name="P:Yarp.ReverseProxy.Forwarder.ForwarderRequestConfig.Empty">
            <summary>
            An empty instance of this type.
            </summary>
        </member>
        <member name="P:Yarp.ReverseProxy.Forwarder.ForwarderRequestConfig.ActivityTimeout">
            <summary>
            How long a request is allowed to remain idle between any operation completing, after which it will be canceled.
            The default is 100 seconds. The timeout will reset when response headers are received or after successfully reading or
            writing any request, response, or streaming data like gRPC or WebSockets. TCP keep-alives and HTTP/2 protocol pings will
            not reset the timeout, but WebSocket pings will.
            </summary>
        </member>
        <member name="P:Yarp.ReverseProxy.Forwarder.ForwarderRequestConfig.Version">
            <summary>
            Preferred version of the outgoing request.
            The default is HTTP/2.0.
            </summary>
        </member>
        <member name="P:Yarp.ReverseProxy.Forwarder.ForwarderRequestConfig.VersionPolicy">
            <summary>
            The policy applied to version selection, e.g. whether to prefer downgrades, upgrades or
            request an exact version. The default is `RequestVersionOrLower`.
            </summary>
        </member>
        <member name="P:Yarp.ReverseProxy.Forwarder.ForwarderRequestConfig.AllowResponseBuffering">
            <summary>
            Allows to use write buffering when sending a response back to the client,
            if the server hosting YARP (e.g. IIS) supports it.
            NOTE: enabling it can break SSE (server side event) scenarios.
            </summary>
        </member>
        <member name="T:Yarp.ReverseProxy.Forwarder.HttpForwarder">
            <summary>
            Default implementation of <see cref="T:Yarp.ReverseProxy.Forwarder.IHttpForwarder"/>.
            </summary>
        </member>
        <member name="M:Yarp.ReverseProxy.Forwarder.HttpForwarder.SendAsync(Microsoft.AspNetCore.Http.HttpContext,System.String,System.Net.Http.HttpMessageInvoker,Yarp.ReverseProxy.Forwarder.ForwarderRequestConfig,Yarp.ReverseProxy.Forwarder.HttpTransformer)">
             <summary>
             Proxies the incoming request to the destination server, and the response back to the client.
             </summary>
             <remarks>
             In what follows, as well as throughout in Reverse Proxy, we consider
             the following picture as illustrative of the Proxy.
             <code>
                  +-------------------+
                  |  Destination      +
                  +-------------------+
                        ▲       |
                    (b) |       | (c)
                        |       ▼
                  +-------------------+
                  |      Proxy        +
                  +-------------------+
                        ▲       |
                    (a) |       | (d)
                        |       ▼
                  +-------------------+
                  | Client            +
                  +-------------------+
             </code>
            
             (a) and (b) show the *request* path, going from the client to the target.
             (c) and (d) show the *response* path, going from the destination back to the client.
            
             Normal proxying comprises the following steps:
                (0) Disable ASP .NET Core limits for streaming requests
                (1) Create outgoing HttpRequestMessage
                (2) Setup copy of request body (background)             Client --► Proxy --► Destination
                (3) Copy request headers                                Client --► Proxy --► Destination
                (4) Send the outgoing request using HttpMessageInvoker  Client --► Proxy --► Destination
                (5) Copy response status line                           Client ◄-- Proxy ◄-- Destination
                (6) Copy response headers                               Client ◄-- Proxy ◄-- Destination
                (7-A) Check for a 101 upgrade response, this takes care of WebSockets as well as any other upgradeable protocol.
                    (7-A-1)  Upgrade client channel                     Client ◄--- Proxy ◄--- Destination
                    (7-A-2)  Copy duplex streams and return             Client ◄--► Proxy ◄--► Destination
                (7-B) Copy (normal) response body                       Client ◄-- Proxy ◄-- Destination
                (8) Copy response trailer headers and finish response   Client ◄-- Proxy ◄-- Destination
                (9) Wait for completion of step 2: copying request body Client --► Proxy --► Destination
            
             ASP .NET Core (Kestrel) will finally send response trailers (if any)
             after we complete the steps above and relinquish control.
             </remarks>
        </member>
        <member name="F:Yarp.ReverseProxy.Forwarder.HttpTransformer.Default">
            <summary>
            A default set of transforms that adds X-Forwarded-* headers, removes the original Host value and
            copies all other request and response fields and headers, except for some protocol specific values.
            </summary>
        </member>
        <member name="F:Yarp.ReverseProxy.Forwarder.HttpTransformer.Empty">
            <summary>
            An empty transformer that copies all request and response fields and headers, except for some
            protocol specific values.
            </summary>
        </member>
        <member name="M:Yarp.ReverseProxy.Forwarder.HttpTransformer.#ctor">
            <summary>
            Used to create derived instances.
            </summary>
        </member>
        <member name="M:Yarp.ReverseProxy.Forwarder.HttpTransformer.TransformRequestAsync(Microsoft.AspNetCore.Http.HttpContext,System.Net.Http.HttpRequestMessage,System.String,System.Threading.CancellationToken)">
            <summary>
            A callback that is invoked prior to sending the proxied request. All HttpRequestMessage fields are
            initialized except RequestUri, which will be initialized after the callback if no value is provided.
            See <see cref="M:Yarp.ReverseProxy.Forwarder.RequestUtilities.MakeDestinationAddress(System.String,Microsoft.AspNetCore.Http.PathString,Microsoft.AspNetCore.Http.QueryString)"/> for constructing a custom request Uri.
            The string parameter represents the destination URI prefix that should be used when constructing the RequestUri.
            The headers are copied by the base implementation, excluding some protocol headers like HTTP/2 pseudo headers (":authority").
            This method may be overridden to conditionally produce a response, such as for error conditions, and prevent the request from
            being proxied. This is indicated by setting the `HttpResponse.StatusCode` to a value other than 200, or calling `HttpResponse.StartAsync()`,
            or writing to the `HttpResponse.Body` or `BodyWriter`.
            </summary>
            <param name="httpContext">The incoming request.</param>
            <param name="proxyRequest">The outgoing proxy request.</param>
            <param name="destinationPrefix">The uri prefix for the selected destination server which can be used to create the RequestUri.</param>
            <param name="cancellationToken">Indicates that the request is being canceled.</param>
        </member>
        <member name="M:Yarp.ReverseProxy.Forwarder.HttpTransformer.TransformRequestAsync(Microsoft.AspNetCore.Http.HttpContext,System.Net.Http.HttpRequestMessage,System.String)">
            <summary>
            A callback that is invoked prior to sending the proxied request. All HttpRequestMessage fields are
            initialized except RequestUri, which will be initialized after the callback if no value is provided.
            See <see cref="M:Yarp.ReverseProxy.Forwarder.RequestUtilities.MakeDestinationAddress(System.String,Microsoft.AspNetCore.Http.PathString,Microsoft.AspNetCore.Http.QueryString)"/> for constructing a custom request Uri.
            The string parameter represents the destination URI prefix that should be used when constructing the RequestUri.
            The headers are copied by the base implementation, excluding some protocol headers like HTTP/2 pseudo headers (":authority").
            This method may be overridden to conditionally produce a response, such as for error conditions, and prevent the request from
            being proxied. This is indicated by setting the `HttpResponse.StatusCode` to a value other than 200, or calling `HttpResponse.StartAsync()`,
            or writing to the `HttpResponse.Body` or `BodyWriter`.
            </summary>
            <param name="httpContext">The incoming request.</param>
            <param name="proxyRequest">The outgoing proxy request.</param>
            <param name="destinationPrefix">The uri prefix for the selected destination server which can be used to create the RequestUri.</param>
        </member>
        <member name="M:Yarp.ReverseProxy.Forwarder.HttpTransformer.TransformResponseAsync(Microsoft.AspNetCore.Http.HttpContext,System.Net.Http.HttpResponseMessage,System.Threading.CancellationToken)">
            <summary>
            A callback that is invoked when the proxied response is received. The status code and reason phrase will be copied
            to the HttpContext.Response before the callback is invoked, but may still be modified there. The headers will be
            copied to HttpContext.Response.Headers by the base implementation, excludes certain protocol headers like
            `Transfer-Encoding: chunked`.
            </summary>
            <param name="httpContext">The incoming request.</param>
            <param name="proxyResponse">The response from the destination. This can be null if the destination did not respond.</param>
            <param name="cancellationToken">Indicates that the request is being canceled.</param>
            <returns>A bool indicating if the response should be proxied to the client or not. A derived implementation 
            that returns false may send an alternate response inline or return control to the caller for it to retry, respond, 
            etc.</returns>
        </member>
        <member name="M:Yarp.ReverseProxy.Forwarder.HttpTransformer.TransformResponseAsync(Microsoft.AspNetCore.Http.HttpContext,System.Net.Http.HttpResponseMessage)">
            <summary>
            A callback that is invoked when the proxied response is received. The status code and reason phrase will be copied
            to the HttpContext.Response before the callback is invoked, but may still be modified there. The headers will be
            copied to HttpContext.Response.Headers by the base implementation, excludes certain protocol headers like
            `Transfer-Encoding: chunked`.
            </summary>
            <param name="httpContext">The incoming request.</param>
            <param name="proxyResponse">The response from the destination. This can be null if the destination did not respond.</param>
            <returns>A bool indicating if the response should be proxied to the client or not. A derived implementation
            that returns false may send an alternate response inline or return control to the caller for it to retry, respond,
            etc.</returns>
        </member>
        <member name="M:Yarp.ReverseProxy.Forwarder.HttpTransformer.TransformResponseTrailersAsync(Microsoft.AspNetCore.Http.HttpContext,System.Net.Http.HttpResponseMessage,System.Threading.CancellationToken)">
            <summary>
            A callback that is invoked after the response body to modify trailers, if supported. The trailers will be
            copied to the HttpContext.Response by the base implementation.
            </summary>
            <param name="httpContext">The incoming request.</param>
            <param name="proxyResponse">The response from the destination.</param>
            <param name="cancellationToken">Indicates that the request is being canceled.</param>
        </member>
        <member name="M:Yarp.ReverseProxy.Forwarder.HttpTransformer.TransformResponseTrailersAsync(Microsoft.AspNetCore.Http.HttpContext,System.Net.Http.HttpResponseMessage)">
            <summary>
            A callback that is invoked after the response body to modify trailers, if supported. The trailers will be
            copied to the HttpContext.Response by the base implementation.
            </summary>
            <param name="httpContext">The incoming request.</param>
            <param name="proxyResponse">The response from the destination.</param>
        </member>
        <member name="T:Yarp.ReverseProxy.Forwarder.IForwarderErrorFeature">
            <summary>
            Stores errors and exceptions that occurred when forwarding the request to the destination.
            </summary>
        </member>
        <member name="P:Yarp.ReverseProxy.Forwarder.IForwarderErrorFeature.Error">
            <summary>
            The specified ProxyError.
            </summary>
        </member>
        <member name="P:Yarp.ReverseProxy.Forwarder.IForwarderErrorFeature.Exception">
            <summary>
            An Exception that occurred when forwarding the request to the destination, if any.
            </summary>
        </member>
        <member name="T:Yarp.ReverseProxy.Forwarder.IForwarderHttpClientFactory">
            <summary>
            Provides a method to create instances of <see cref="T:System.Net.Http.HttpMessageInvoker"/>
            for forwarding requests to an upstream server.
            </summary>
            <remarks>
            This is somewhat similarly to `System.Net.Http.IHttpClientFactory`,
            except that this factory class is meant for direct use,
            which the forwarder requires in order to keep separate pools for each cluster.
            </remarks>
        </member>
        <member name="M:Yarp.ReverseProxy.Forwarder.IForwarderHttpClientFactory.CreateClient(Yarp.ReverseProxy.Forwarder.ForwarderHttpClientContext)">
            <summary>
            Creates and configures an <see cref="T:System.Net.Http.HttpMessageInvoker"/> instance
            that can be used for forwarding requests to an upstream server.
            </summary>
            <param name="context">An <see cref="T:Yarp.ReverseProxy.Forwarder.ForwarderHttpClientContext"/> carrying old and new cluster configurations.</param>
            <remarks>
            <para>
            A call to <see cref="M:Yarp.ReverseProxy.Forwarder.IForwarderHttpClientFactory.CreateClient(Yarp.ReverseProxy.Forwarder.ForwarderHttpClientContext)"/> can return either
            a new <see cref="T:System.Net.Http.HttpMessageInvoker"/> instance or an old one if the configuration has not changed.
            If the old configuration is null, a new <see cref="T:System.Net.Http.HttpMessageInvoker"/> is always created.
            The returned <see cref="T:System.Net.Http.HttpMessageInvoker"/> instance MUST NOT be disposed
            because it can be used concurrently by several in-flight requests.
            </para>
            </remarks>
        </member>
        <member name="T:Yarp.ReverseProxy.Forwarder.IHttpForwarder">
            <summary>
            Forward an HTTP request to a chosen destination.
            </summary>
        </member>
        <member name="M:Yarp.ReverseProxy.Forwarder.IHttpForwarder.SendAsync(Microsoft.AspNetCore.Http.HttpContext,System.String,System.Net.Http.HttpMessageInvoker,Yarp.ReverseProxy.Forwarder.ForwarderRequestConfig,Yarp.ReverseProxy.Forwarder.HttpTransformer)">
            <summary>
            Forwards the incoming request to the destination server, and the response back to the client.
            </summary>
            <param name="context">The HttpContext to forward.</param>
            <param name="destinationPrefix">The url prefix for where to forward the request to.</param>
            <param name="httpClient">The HTTP client used to forward the request.</param>
            <param name="requestConfig">Config for the outgoing request.</param>
            <param name="transformer">Request and response transforms. Use <see cref="F:Yarp.ReverseProxy.Forwarder.HttpTransformer.Default"/> if
            custom transformations are not needed.</param>
            <returns>The result of forwarding the request and response.</returns>
        </member>
        <member name="M:Yarp.ReverseProxy.Forwarder.IHttpForwarder.SendAsync(Microsoft.AspNetCore.Http.HttpContext,System.String,System.Net.Http.HttpMessageInvoker,Yarp.ReverseProxy.Forwarder.ForwarderRequestConfig,Yarp.ReverseProxy.Forwarder.HttpTransformer,System.Threading.CancellationToken)">
            <summary>
            Forwards the incoming request to the destination server, and the response back to the client.
            </summary>
            <param name="context">The HttpContext to forward.</param>
            <param name="destinationPrefix">The url prefix for where to forward the request to.</param>
            <param name="httpClient">The HTTP client used to forward the request.</param>
            <param name="requestConfig">Config for the outgoing request.</param>
            <param name="transformer">Request and response transforms. Use <see cref="F:Yarp.ReverseProxy.Forwarder.HttpTransformer.Default"/> if
            custom transformations are not needed.</param>
            <param name="cancellationToken">A cancellation token that can be used to abort the request.</param>
            <returns>The result of forwarding the request and response.</returns>
        </member>
        <member name="T:Yarp.ReverseProxy.Forwarder.IHttpForwarderExtensions">
            <summary>
            Extensions methods for <see cref="T:Yarp.ReverseProxy.Forwarder.IHttpForwarder"/>.
            </summary>
        </member>
        <member name="M:Yarp.ReverseProxy.Forwarder.IHttpForwarderExtensions.SendAsync(Yarp.ReverseProxy.Forwarder.IHttpForwarder,Microsoft.AspNetCore.Http.HttpContext,System.String,System.Net.Http.HttpMessageInvoker)">
            <summary>
            Forwards the incoming request to the destination server, and the response back to the client.
            </summary>
            <param name="forwarder">The forwarder instance.</param>
            <param name="context">The HttpContext to forward.</param>
            <param name="destinationPrefix">The url prefix for where to forward the request to.</param>
            <param name="httpClient">The HTTP client used to forward the request.</param>
            <returns>The status of a forwarding operation.</returns>
        </member>
        <member name="M:Yarp.ReverseProxy.Forwarder.IHttpForwarderExtensions.SendAsync(Yarp.ReverseProxy.Forwarder.IHttpForwarder,Microsoft.AspNetCore.Http.HttpContext,System.String,System.Net.Http.HttpMessageInvoker,Yarp.ReverseProxy.Forwarder.ForwarderRequestConfig)">
            <summary>
            Forwards the incoming request to the destination server, and the response back to the client.
            </summary>
            <param name="forwarder">The forwarder instance.</param>
            <param name="context">The HttpContext to forward.</param>
            <param name="destinationPrefix">The url prefix for where to forward the request to.</param>
            <param name="httpClient">The HTTP client used to forward the request.</param>
            <param name="requestConfig">Config for the outgoing request.</param>
            <returns>The status of a forwarding operation.</returns>
        </member>
        <member name="M:Yarp.ReverseProxy.Forwarder.IHttpForwarderExtensions.SendAsync(Yarp.ReverseProxy.Forwarder.IHttpForwarder,Microsoft.AspNetCore.Http.HttpContext,System.String,System.Net.Http.HttpMessageInvoker,System.Func{Microsoft.AspNetCore.Http.HttpContext,System.Net.Http.HttpRequestMessage,System.Threading.Tasks.ValueTask})">
            <summary>
            Forwards the incoming request to the destination server, and the response back to the client.
            </summary>
            <param name="forwarder">The forwarder instance.</param>
            <param name="context">The HttpContext to forward.</param>
            <param name="destinationPrefix">The url prefix for where to forward the request to.</param>
            <param name="httpClient">The HTTP client used to forward the request.</param>
            <param name="requestTransform">Transform function to apply to the forwarded request.</param>
            <returns>The status of a forwarding operation.</returns>
        </member>
        <member name="M:Yarp.ReverseProxy.Forwarder.IHttpForwarderExtensions.SendAsync(Yarp.ReverseProxy.Forwarder.IHttpForwarder,Microsoft.AspNetCore.Http.HttpContext,System.String,System.Net.Http.HttpMessageInvoker,Yarp.ReverseProxy.Forwarder.ForwarderRequestConfig,System.Func{Microsoft.AspNetCore.Http.HttpContext,System.Net.Http.HttpRequestMessage,System.Threading.Tasks.ValueTask})">
            <summary>
            Forwards the incoming request to the destination server, and the response back to the client.
            </summary>
            <param name="forwarder">The forwarder instance.</param>
            <param name="context">The HttpContext to forward.</param>
            <param name="destinationPrefix">The url prefix for where to forward the request to.</param>
            <param name="httpClient">The HTTP client used to forward the request.</param>
            <param name="requestConfig">Config for the outgoing request.</param>
            <param name="requestTransform">Transform function to apply to the forwarded request.</param>
            <returns>The status of a forwarding operation.</returns>
        </member>
        <member name="M:Yarp.ReverseProxy.Forwarder.ProtocolHelper.IsGrpcContentType(System.String)">
            <summary>
            Checks whether the provided content type header value represents a gRPC request.
            </summary>
        </member>
        <member name="M:Yarp.ReverseProxy.Forwarder.ProtocolHelper.CreateSecWebSocketKey">
            <summary>
            Creates a security key for sending in the Sec-WebSocket-Key header.
            </summary>
        </member>
        <member name="M:Yarp.ReverseProxy.Forwarder.ProtocolHelper.CreateSecWebSocketAccept(System.String)">
            <summary>
            Creates the Accept response to a given security key for sending in or verifying the Sec-WebSocket-Accept header value.
            </summary>
        </member>
        <member name="T:Yarp.ReverseProxy.Forwarder.RequestUtilities">
            <summary>
            APIs that can be used when transforming requests.
            </summary>
        </member>
        <member name="M:Yarp.ReverseProxy.Forwarder.RequestUtilities.GetHttpMethod(System.String)">
            <summary>
            Converts the given HTTP method (usually obtained from <see cref="P:Microsoft.AspNetCore.Http.HttpRequest.Method"/>)
            into the corresponding <see cref="T:System.Net.Http.HttpMethod"/> static instance.
            </summary>
        </member>
        <member name="M:Yarp.ReverseProxy.Forwarder.RequestUtilities.MakeDestinationAddress(System.String,Microsoft.AspNetCore.Http.PathString,Microsoft.AspNetCore.Http.QueryString)">
            <summary>
            Appends the given path and query to the destination prefix while avoiding duplicate '/'.
            </summary>
            <param name="destinationPrefix">The scheme, host, port, and optional path base for the destination server.
            e.g. "http://example.com:80/path/prefix"</param>
            <param name="path">The path to append.</param>
            <param name="query">The query to append</param>
        </member>
        <member name="T:Yarp.ReverseProxy.Forwarder.ReverseProxyPropagator">
            <summary>
            Removes existing headers and then delegates to the inner propagator.
            </summary>
        </member>
        <member name="M:Yarp.ReverseProxy.Forwarder.ReverseProxyPropagator.#ctor(System.Diagnostics.DistributedContextPropagator)">
            <summary>
            ReverseProxyPropagator removes headers pointed out in innerPropagator.
            </summary>
        </member>
        <member name="T:Yarp.ReverseProxy.Forwarder.StreamCopier">
            <summary>
            A stream copier that captures errors.
            </summary>
        </member>
        <member name="T:Yarp.ReverseProxy.Forwarder.StreamCopyHttpContent">
            <summary>
            Custom <see cref="T:System.Net.Http.HttpContent"/>
            used to proxy the incoming request body to the upstream server.
            </summary>
            <remarks>
            <para>
            By implementing a custom <see cref="T:System.Net.Http.HttpContent"/>, we are able to execute
            our custom code for all HTTP protocol versions.
            See the remarks section of <see cref="M:Yarp.ReverseProxy.Forwarder.StreamCopyHttpContent.SerializeToStreamAsync(System.IO.Stream,System.Net.TransportContext)"/>
            for more details.
            </para>
            <para>
            <see cref="T:System.Net.Http.HttpContent"/> declares an internal property `AllowDuplex`
            which, when set to true, causes <see cref="T:System.Net.Http.HttpClient"/> and friends
            to NOT tie up the request body stream operations to the same cancellation token
            that is passed to <see cref="M:System.Net.Http.HttpClient.SendAsync(System.Net.Http.HttpRequestMessage,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)"/>.
            </para>
            <para>
            When proxying duplex channels such as HTTP/2, gRPC,
            we need `HttpContent.AllowDuplex` to be true.
            It so happens to be by default on .NET Core 3.1. Should that ever change,
            this class will need to be updated.
            </para>
            </remarks>
        </member>
        <member name="P:Yarp.ReverseProxy.Forwarder.StreamCopyHttpContent.ConsumptionTask">
            <summary>
            Gets a <see cref="T:System.Threading.Tasks.Task"/> that completes in successful or failed state
            mimicking the result of SerializeToStreamAsync.
            </summary>
        </member>
        <member name="P:Yarp.ReverseProxy.Forwarder.StreamCopyHttpContent.Started">
            <summary>
            Gets a value indicating whether consumption of this content has begun.
            Property <see cref="P:Yarp.ReverseProxy.Forwarder.StreamCopyHttpContent.ConsumptionTask"/> can be used to track the asynchronous outcome of the operation.
            </summary>
            <remarks>
            When used as an outgoing request content with <see cref="T:System.Net.Http.HttpClient"/>,
            this should always be true by the time the task returned by
            <see cref="M:System.Net.Http.HttpClient.SendAsync(System.Net.Http.HttpRequestMessage,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)"/>
            completes, even when using <see cref="F:System.Net.Http.HttpCompletionOption.ResponseHeadersRead"/>.
            </remarks>
        </member>
        <member name="M:Yarp.ReverseProxy.Forwarder.StreamCopyHttpContent.SerializeToStreamAsync(System.IO.Stream,System.Net.TransportContext)">
             <summary>
             Copies bytes from the stream provided in our constructor into the target <paramref name="stream"/>.
             </summary>
             <remarks>
             This is used internally by HttpClient.SendAsync to send the request body.
             Here's the sequence of events as of commit 17300169760c61a90cab8d913636c1058a30a8c1 (https://github.com/dotnet/corefx -- tag v3.1.1).
            
             <code>
             HttpClient.SendAsync -->
             HttpMessageInvoker.SendAsync -->
             HttpClientHandler.SendAsync -->
             SocketsHttpHandler.SendAsync -->
             HttpConnectionHandler.SendAsync -->
             HttpConnectionPoolManager.SendAsync -->
             HttpConnectionPool.SendAsync --> ... -->
             {
                 HTTP/1.1: HttpConnection.SendAsync -->
                           HttpConnection.SendAsyncCore -->
                           HttpConnection.SendRequestContentAsync -->
                           HttpContent.CopyToAsync
            
                 HTTP/2:   Http2Connection.SendAsync -->
                           Http2Stream.SendRequestBodyAsync -->
                           HttpContent.CopyToAsync
            
                 /* Only in .NET 5:
                 HTTP/3:   Http3Connection.SendAsync -->
                           Http3Connection.SendWithoutWaitingAsync -->
                           Http3RequestStream.SendAsync -->
                           Http3RequestStream.SendContentAsync -->
                           HttpContent.CopyToAsync
                 */
             }
            
             HttpContent.CopyToAsync -->
             HttpContent.SerializeToStreamAsync (bingo!)
             </code>
            
             Conclusion: by overriding HttpContent.SerializeToStreamAsync,
             we have full control over pumping bytes to the target stream for all protocols
             (except Web Sockets, which is handled separately).
             </remarks>
        </member>
        <member name="M:Yarp.ReverseProxy.Forwarder.StreamCopyHttpContent.DisableMinRequestBodyDataRateAndMaxRequestBodySize(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            Disable some ASP .NET Core server limits so that we can handle long-running gRPC requests unconstrained.
            Note that the gRPC server implementation on ASP .NET Core does the same for client-streaming and duplex methods.
            Since in Gateway we have no way to determine if the current request requires client-streaming or duplex comm,
            we do this for *all* incoming requests that look like they might be gRPC.
            </summary>
            <remarks>
            Inspired on
            <see href="https://github.com/grpc/grpc-dotnet/blob/3ce9b104524a4929f5014c13cd99ba9a1c2431d4/src/Grpc.AspNetCore.Server/Internal/CallHandlers/ServerCallHandlerBase.cs#L127"/>.
            </remarks>
        </member>
        <member name="T:Yarp.ReverseProxy.Health.ActiveHealthCheckMonitorOptions">
            <summary>
            Defines options for the active health check monitor.
            </summary>
        </member>
        <member name="P:Yarp.ReverseProxy.Health.ActiveHealthCheckMonitorOptions.DefaultInterval">
            <summary>
            Default probing interval.
            </summary>
        </member>
        <member name="P:Yarp.ReverseProxy.Health.ActiveHealthCheckMonitorOptions.DefaultTimeout">
            <summary>
            Default probes timeout.
            </summary>
        </member>
        <member name="T:Yarp.ReverseProxy.Health.ConsecutiveFailuresHealthPolicyOptions">
            <summary>
            Defines options for the consecutive failures active health check policy.
            </summary>
        </member>
        <member name="F:Yarp.ReverseProxy.Health.ConsecutiveFailuresHealthPolicyOptions.ThresholdMetadataName">
            <summary>
            Name of the consecutive failure threshold metadata parameter.
            It's the number of consecutive failure that needs to happen in order to mark a destination as unhealthy.
            </summary>
        </member>
        <member name="P:Yarp.ReverseProxy.Health.ConsecutiveFailuresHealthPolicyOptions.DefaultThreshold">
            <summary>
            Default consecutive failures threshold that is applied if it's not set on a cluster's metadata.
            </summary>
        </member>
        <member name="T:Yarp.ReverseProxy.Health.DestinationProbingResult">
            <summary>
            Result of a destination's active health probing.
            </summary>
        </member>
        <member name="P:Yarp.ReverseProxy.Health.DestinationProbingResult.Destination">
            <summary>
            Probed destination.
            </summary>
        </member>
        <member name="P:Yarp.ReverseProxy.Health.DestinationProbingResult.Response">
            <summary>
            Response recieved.
            It can be null in case of a failure.
            </summary>
        </member>
        <member name="P:Yarp.ReverseProxy.Health.DestinationProbingResult.Exception">
            <summary>
            Exception thrown during probing.
            It is null in case of a success.
            </summary>
        </member>
        <member name="T:Yarp.ReverseProxy.Health.EntityActionScheduler`1">
            <summary>
            Periodically invokes specified actions on registered entities.
            </summary>
            <remarks>
            It creates a separate <see cref="T:System.Threading.Timer"/> for each registration which is considered
            reasonably efficient because .NET already maintains a process-wide managed timer queue.
            There are 2 scheduling modes supported: run once and infinite run. In "run once" mode,
            an entity gets unscheduled after the respective timer fired for the first time whereas
            in "infinite run" entities get repeatedly rescheduled until either they are explicitly removed
            or the <see cref="T:Yarp.ReverseProxy.Health.EntityActionScheduler`1"/> instance is disposed.
            </remarks>
        </member>
        <member name="F:Yarp.ReverseProxy.Health.HealthCheckConstants.AvailableDestinations.HealthyAndUnknown">
            <summary>
            Marks destination as available for proxying requests to if its health state
            is either 'Healthy' or 'Unknown'. If no destinations are available then
            requests will get a 503 error.
            </summary>
            <remarks>It applies only if active or passive health checks are enabled.</remarks>
        </member>
        <member name="F:Yarp.ReverseProxy.Health.HealthCheckConstants.AvailableDestinations.HealthyOrPanic">
            <summary>
            Calls <see cref="F:Yarp.ReverseProxy.Health.HealthCheckConstants.AvailableDestinations.HealthyAndUnknown"/> policy at first to determine
            destinations' availability. If no available destinations are returned
            from this call, it marks all cluster's destination as available.
            </summary>
        </member>
        <member name="T:Yarp.ReverseProxy.Health.HealthyAndUnknownDestinationsPolicy">
            are either 'Healthy' or 'Unknown'/>.
        </member>
        <member name="T:Yarp.ReverseProxy.Health.IActiveHealthCheckMonitor">
            <summary>
            Actively monitors destinations health.
            </summary>
        </member>
        <member name="P:Yarp.ReverseProxy.Health.IActiveHealthCheckMonitor.InitialProbeCompleted">
            <summary>
            Gets a value that determines whether the initial round of active health checks have run, regardless of the results.
            </summary>
            <returns>
            <c>false</c> until the initial round of health check requests has been processed.
            <c>true</c> when all the initially configured destinations have been queried, regardless their availability or returned status code.
            The property stays <c>true</c> for the rest of the proxy process lifetime.
            </returns>
        </member>
        <member name="M:Yarp.ReverseProxy.Health.IActiveHealthCheckMonitor.CheckHealthAsync(System.Collections.Generic.IEnumerable{Yarp.ReverseProxy.Model.ClusterState})">
            <summary>
            Checks health of all clusters' destinations.
            </summary>
            <param name="clusters">Clusters to check the health of their destinations.</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/> representing the health check process.</returns>
        </member>
        <member name="T:Yarp.ReverseProxy.Health.IActiveHealthCheckPolicy">
            <summary>
            Active health check evaluation policy.
            </summary>
        </member>
        <member name="P:Yarp.ReverseProxy.Health.IActiveHealthCheckPolicy.Name">
            <summary>
            Policy's name.
            </summary>
        </member>
        <member name="M:Yarp.ReverseProxy.Health.IActiveHealthCheckPolicy.ProbingCompleted(Yarp.ReverseProxy.Model.ClusterState,System.Collections.Generic.IReadOnlyList{Yarp.ReverseProxy.Health.DestinationProbingResult})">
            <summary>
            Analyzes results of active health probes sent to destinations and calculates their new health states.
            </summary>
            <param name="cluster">Cluster.</param>
            <param name="probingResults">Destination probing results.</param>
        </member>
        <member name="T:Yarp.ReverseProxy.Health.IAvailableDestinationsPolicy">
            <summary>
            Policy evaluating which destinations should be available for proxying requests to.
            </summary>
        </member>
        <member name="P:Yarp.ReverseProxy.Health.IAvailableDestinationsPolicy.Name">
            <summary>
            Policy name.
            </summary>
        </member>
        <member name="M:Yarp.ReverseProxy.Health.IAvailableDestinationsPolicy.GetAvailalableDestinations(Yarp.ReverseProxy.Configuration.ClusterConfig,System.Collections.Generic.IReadOnlyList{Yarp.ReverseProxy.Model.DestinationState})">
            <summary>
            Reviews all given destinations and returns the ones available for proxying requests to.
            </summary>
            <param name="config">Target cluster.</param>
            <param name="allDestinations">All destinations configured for the target cluster.</param>
            <returns></returns>
        </member>
        <member name="T:Yarp.ReverseProxy.Health.IClusterDestinationsUpdater">
            <summary>
            Updates the cluster's destination collections.
            </summary>
        </member>
        <member name="M:Yarp.ReverseProxy.Health.IClusterDestinationsUpdater.UpdateAvailableDestinations(Yarp.ReverseProxy.Model.ClusterState)">
            <summary>
            Updates the cluster's collection of destination available for proxying requests to.
            Call this if health state has changed for any destinations.
            </summary>
            <param name="cluster">The <see cref="T:Yarp.ReverseProxy.Model.ClusterState"/> owing the destinations.</param>
        </member>
        <member name="M:Yarp.ReverseProxy.Health.IClusterDestinationsUpdater.UpdateAllDestinations(Yarp.ReverseProxy.Model.ClusterState)">
            <summary>
            Updates the cluster's collection of all configured destinations.
            Call this after destinations have been added, removed, or their configuration changed.
            This does not need to be called for state updates like health, use UpdateAvailableDestinations for state updates.
            </summary>
            <param name="cluster">The <see cref="T:Yarp.ReverseProxy.Model.ClusterState"/> owing the destinations.</param>
        </member>
        <member name="T:Yarp.ReverseProxy.Health.IDestinationHealthUpdater">
            <summary>
            Updates destinations' health states when it's requested by a health check policy
            while taking into account not only the new evaluated value but also the overall current cluster's health state.
            </summary>
        </member>
        <member name="M:Yarp.ReverseProxy.Health.IDestinationHealthUpdater.SetPassive(Yarp.ReverseProxy.Model.ClusterState,Yarp.ReverseProxy.Model.DestinationState,Yarp.ReverseProxy.Model.DestinationHealth,System.TimeSpan)">
            <summary>
            Sets the passive health on the given <paramref name="destination"/>.
            </summary>
            <param name="cluster">Cluster.</param>
            <param name="destination">Destination.</param>
            <param name="newHealth">New passive health value.</param>
            <param name="reactivationPeriod">If <paramref name="newHealth"/> is <see cref="F:Yarp.ReverseProxy.Model.DestinationHealth.Unhealthy"/>,
            this parameter specifies a reactivation period after which the destination's <see cref="P:Yarp.ReverseProxy.Model.DestinationHealthState.Passive"/> value
            will be reset to <see cref="F:Yarp.ReverseProxy.Model.DestinationHealth.Unknown"/>. Otherwise, it's not used.</param>
        </member>
        <member name="M:Yarp.ReverseProxy.Health.IDestinationHealthUpdater.SetActive(Yarp.ReverseProxy.Model.ClusterState,System.Collections.Generic.IEnumerable{Yarp.ReverseProxy.Health.NewActiveDestinationHealth})">
            <summary>
            Sets the active health values on the given destinations.
            </summary>
            <param name="cluster">Cluster.</param>
            <param name="newHealthStates">New active health states.</param>
        </member>
        <member name="T:Yarp.ReverseProxy.Health.IPassiveHealthCheckPolicy">
            <summary>
            Passive health check evaluation policy.
            </summary>
        </member>
        <member name="P:Yarp.ReverseProxy.Health.IPassiveHealthCheckPolicy.Name">
            <summary>
            Policy's name.
            </summary>
        </member>
        <member name="M:Yarp.ReverseProxy.Health.IPassiveHealthCheckPolicy.RequestProxied(Microsoft.AspNetCore.Http.HttpContext,Yarp.ReverseProxy.Model.ClusterState,Yarp.ReverseProxy.Model.DestinationState)">
            <summary>
            Registers a successful or failed request and evaluates a new <see cref="P:Yarp.ReverseProxy.Model.DestinationHealthState.Passive"/> value.
            </summary>
            <param name="context">Context.</param>
            <param name="cluster">Request's cluster.</param>
            <param name="destination">Request's destination.</param>
        </member>
        <member name="T:Yarp.ReverseProxy.Health.IProbingRequestFactory">
            <summary>
            A factory for creating <see cref="T:System.Net.Http.HttpRequestMessage"/>s for active health probes to be sent to destinations.
            </summary>
        </member>
        <member name="M:Yarp.ReverseProxy.Health.IProbingRequestFactory.CreateRequest(Yarp.ReverseProxy.Model.ClusterModel,Yarp.ReverseProxy.Model.DestinationModel)">
            <summary>
            Creates a probing request.
            </summary>
            <param name="cluster">The cluster being probed.</param>
            <param name="destination">The destination being probed.</param>
            <returns>Probing <see cref="T:System.Net.Http.HttpRequestMessage"/>.</returns>
        </member>
        <member name="T:Yarp.ReverseProxy.Health.NewActiveDestinationHealth">
            <summary>
            Stores a new active health state for the given destination.
            </summary>
        </member>
        <member name="T:Yarp.ReverseProxy.Health.TransportFailureRateHealthPolicy">
            <summary>
            Calculates the proxied requests failure rate for each destination and marks it as unhealthy if the specified limit is exceeded.
            </summary>
            <remarks>
            Rate is calculated as a percentage of failured requests to the total number of request proxied to a destination in the given period of time. Failed and total counters are tracked
            in a sliding time window which means that only the recent readings fitting in the window are taken into account. The window is implemented as a linked-list of timestamped records
            where each record contains the difference from the previous one in the number of failed and total requests. Additionally, there are 2 destination-wide counters storing aggregated values
            to enable a fast calculation of the current failure rate. When a new proxied request is reported, its status firstly affects those 2 aggregated counters and then also gets put
            in the record history. Once some record moves out of the detection time window, the failed and total counter deltas stored on it get subtracted from the respective aggregated counters.
            </remarks>
        </member>
        <member name="T:Yarp.ReverseProxy.Health.TransportFailureRateHealthPolicyOptions">
            <summary>
            Defines options for the transport failure rate passive health policy.
            </summary>
        </member>
        <member name="F:Yarp.ReverseProxy.Health.TransportFailureRateHealthPolicyOptions.FailureRateLimitMetadataName">
            <summary>
            Name of failure rate limit metadata parameter. Destination marked as unhealthy once this limit is reached.
            </summary>
        </member>
        <member name="P:Yarp.ReverseProxy.Health.TransportFailureRateHealthPolicyOptions.DetectionWindowSize">
            <summary>
            Period of time while detected failures are kept and taken into account in the rate calculation.
            The default is 60 seconds.
            </summary>
        </member>
        <member name="P:Yarp.ReverseProxy.Health.TransportFailureRateHealthPolicyOptions.MinimalTotalCountThreshold">
            <summary>
            Minimal total number of requests which must be proxied to a destination within the detection window
            before this policy starts evaluating the destination's health and enforcing the failure rate limit.
            The default is 10.
            </summary>
        </member>
        <member name="P:Yarp.ReverseProxy.Health.TransportFailureRateHealthPolicyOptions.DefaultFailureRateLimit">
            <summary>
            Default failure rate limit for a destination to be marked as unhealhty that is applied if it's not set on a cluster's metadata.
            It's calculated as a percentage of failed requests out of all requests proxied to the same destination in the <see cref="P:Yarp.ReverseProxy.Health.TransportFailureRateHealthPolicyOptions.DetectionWindowSize"/> period.
            The value is in range (0,1). The default is 0.3 (30%).
            </summary>
        </member>
        <member name="T:Yarp.ReverseProxy.Limits.LimitsMiddleware">
            <summary>
            Updates request limits based on route config. This is implemented as middleware at the end of the proxy
            pipeline so that apps can call ReassignProxyRequest to move the request to a different route before limits are applied. While similar to a proposed aspnetcore feature (https://github.com/dotnet/aspnetcore/issues/40452),
            the possibility of reassigning routes means we need to apply this limit very late. Trying to apply it twice could
            result in unexpected behavior like being unable to set it back to the server default.
            </summary>
        </member>
        <member name="M:Yarp.ReverseProxy.Limits.LimitsMiddleware.Invoke(Microsoft.AspNetCore.Http.HttpContext)">
            <inheritdoc/>
        </member>
        <member name="T:Yarp.ReverseProxy.LoadBalancing.FirstLoadBalancingPolicy">
            <summary>
            Select the alphabetically first available destination without considering load. This is useful for dual destination fail-over systems.
            </summary>
        </member>
        <member name="T:Yarp.ReverseProxy.LoadBalancing.ILoadBalancingPolicy">
            <summary>
            Provides a method that applies a load balancing policy
            to select a destination.
            </summary>
        </member>
        <member name="P:Yarp.ReverseProxy.LoadBalancing.ILoadBalancingPolicy.Name">
            <summary>
             A unique identifier for this load balancing policy. This will be referenced from config.
            </summary>
        </member>
        <member name="M:Yarp.ReverseProxy.LoadBalancing.ILoadBalancingPolicy.PickDestination(Microsoft.AspNetCore.Http.HttpContext,Yarp.ReverseProxy.Model.ClusterState,System.Collections.Generic.IReadOnlyList{Yarp.ReverseProxy.Model.DestinationState})">
            <summary>
            Picks a destination to send traffic to.
            </summary>
        </member>
        <member name="T:Yarp.ReverseProxy.LoadBalancing.LoadBalancingMiddleware">
            <summary>
            Load balances across the available destinations.
            </summary>
        </member>
        <member name="T:Yarp.ReverseProxy.LoadBalancing.LoadBalancingPolicies">
            <summary>
            Names of built-in load balancing policies.
            </summary>
        </member>
        <member name="P:Yarp.ReverseProxy.LoadBalancing.LoadBalancingPolicies.FirstAlphabetical">
            <summary>
            Select the alphabetically first available destination without considering load. This is useful for dual destination fail-over systems.
            </summary>
        </member>
        <member name="P:Yarp.ReverseProxy.LoadBalancing.LoadBalancingPolicies.Random">
            <summary>
            Select a destination randomly.
            </summary>
        </member>
        <member name="P:Yarp.ReverseProxy.LoadBalancing.LoadBalancingPolicies.RoundRobin">
            <summary>
            Select a destination by cycling through them in order.
            </summary>
        </member>
        <member name="P:Yarp.ReverseProxy.LoadBalancing.LoadBalancingPolicies.LeastRequests">
            <summary>
            Select the destination with the least assigned requests. This requires examining all destinations.
            </summary>
        </member>
        <member name="P:Yarp.ReverseProxy.LoadBalancing.LoadBalancingPolicies.PowerOfTwoChoices">
            <summary>
            Select two random destinations and then select the one with the least assigned requests.
            This avoids the overhead of LeastRequests and the worst case for Random where it selects a busy destination.
            </summary>
        </member>
        <member name="T:Yarp.ReverseProxy.IProxyStateLookup">
            <summary>
            Allows access to the proxy's current set of routes and clusters.
            </summary>
        </member>
        <member name="M:Yarp.ReverseProxy.IProxyStateLookup.TryGetRoute(System.String,Yarp.ReverseProxy.Model.RouteModel@)">
            <summary>
            Retrieves a specific route by id, if present.
            </summary>
        </member>
        <member name="M:Yarp.ReverseProxy.IProxyStateLookup.GetRoutes">
            <summary>
            Enumerates all current routes. This is thread safe but the collection may change mid enumeration if the configuration is reloaded.
            </summary>
        </member>
        <member name="M:Yarp.ReverseProxy.IProxyStateLookup.TryGetCluster(System.String,Yarp.ReverseProxy.Model.ClusterState@)">
            <summary>
            Retrieves a specific cluster by id, if present.
            </summary>
        </member>
        <member name="M:Yarp.ReverseProxy.IProxyStateLookup.GetClusters">
            <summary>
            Enumerates all current clusters. This is thread safe but the collection may change mid enumeration if the configuration is reloaded.
            </summary>
        </member>
        <member name="T:Yarp.ReverseProxy.Management.ProxyConfigManager">
            <summary>
            Provides a method to apply Proxy configuration changes.
            Also an Implementation of <see cref="T:Microsoft.AspNetCore.Routing.EndpointDataSource"/> that supports being dynamically updated
            in a thread-safe manner while avoiding locks on the hot path.
            </summary>
        </member>
        <member name="P:Yarp.ReverseProxy.Management.ProxyConfigManager.Endpoints">
            <inheritdoc/>
        </member>
        <member name="M:Yarp.ReverseProxy.Management.ProxyConfigManager.GetChangeToken">
            <inheritdoc/>
        </member>
        <member name="M:Yarp.ReverseProxy.Management.ProxyConfigManager.UpdateEndpoints(System.Collections.Generic.List{Microsoft.AspNetCore.Http.Endpoint})">
            <summary>
            Applies a new set of ASP .NET Core endpoints. Changes take effect immediately.
            </summary>
            <param name="endpoints">New endpoints to apply.</param>
        </member>
        <member name="T:Yarp.ReverseProxy.Management.ReverseProxyBuilder">
            <summary>
            Reverse Proxy builder for DI configuration.
            </summary>
        </member>
        <member name="M:Yarp.ReverseProxy.Management.ReverseProxyBuilder.#ctor(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:Yarp.ReverseProxy.Management.ReverseProxyBuilder"/> class.
            </summary>
            <param name="services">Services collection.</param>
        </member>
        <member name="P:Yarp.ReverseProxy.Management.ReverseProxyBuilder.Services">
            <summary>
            Gets the services collection.
            </summary>
        </member>
        <member name="T:Yarp.ReverseProxy.Model.ClusterModel">
            <summary>
            Immutable representation of the portions of a cluster
            that only change in reaction to configuration changes
            (e.g. http client options).
            </summary>
            <remarks>
            All members must remain immutable to avoid thread safety issues.
            Instead, instances of <see cref="T:Yarp.ReverseProxy.Model.ClusterModel"/> are replaced
            in their entirety when values need to change.
            </remarks>
        </member>
        <member name="M:Yarp.ReverseProxy.Model.ClusterModel.#ctor(Yarp.ReverseProxy.Configuration.ClusterConfig,System.Net.Http.HttpMessageInvoker)">
            <summary>
            Creates a new Instance.
            </summary>
        </member>
        <member name="P:Yarp.ReverseProxy.Model.ClusterModel.Config">
            <summary>
            The config for this cluster.
            </summary>
        </member>
        <member name="P:Yarp.ReverseProxy.Model.ClusterModel.HttpClient">
            <summary>
            An <see cref="T:System.Net.Http.HttpMessageInvoker"/> that used for proxying requests to an upstream server.
            </summary>
        </member>
        <member name="T:Yarp.ReverseProxy.Model.ClusterState">
            <summary>
            Representation of a cluster for use at runtime.
            </summary>
        </member>
        <member name="M:Yarp.ReverseProxy.Model.ClusterState.#ctor(System.String)">
            <summary>
            Creates a new instance. This constructor is for tests and infrastructure, this type is normally constructed by the configuration
            loading infrastructure.
            </summary>
        </member>
        <member name="P:Yarp.ReverseProxy.Model.ClusterState.ClusterId">
            <summary>
            The cluster's unique id.
            </summary>
        </member>
        <member name="P:Yarp.ReverseProxy.Model.ClusterState.Model">
            <summary>
            Encapsulates parts of a cluster that can change atomically in reaction to config changes.
            </summary>
        </member>
        <member name="P:Yarp.ReverseProxy.Model.ClusterState.Destinations">
            <summary>
            All of the destinations associated with this cluster. This collection is populated by the configuration system
            and should only be directly modified in a test environment.
            Call <see cref="T:Yarp.ReverseProxy.Health.IClusterDestinationsUpdater"/> after modifying this collection.
            </summary>
        </member>
        <member name="P:Yarp.ReverseProxy.Model.ClusterState.DestinationsState">
            <summary>
            Stores the state of cluster's destinations that can change atomically
            in reaction to runtime state changes (e.g. changes of destinations' health).
            </summary>
        </member>
        <member name="P:Yarp.ReverseProxy.Model.ClusterState.ConcurrencyCounter">
            <summary>
            Keeps track of the total number of concurrent requests on this cluster.
            </summary>
        </member>
        <member name="P:Yarp.ReverseProxy.Model.ClusterState.Revision">
            <summary>
            Tracks changes to the cluster configuration for use with rebuilding dependent endpoints. Destination changes do not affect this property.
            </summary>
        </member>
        <member name="T:Yarp.ReverseProxy.Model.DestinationHealthState">
            <summary>
            Tracks destination passive and active health states.
            </summary>
        </member>
        <member name="P:Yarp.ReverseProxy.Model.DestinationHealthState.Passive">
            <summary>
            Passive health state.
            </summary>
        </member>
        <member name="P:Yarp.ReverseProxy.Model.DestinationHealthState.Active">
            <summary>
            Active health state.
            </summary>
        </member>
        <member name="T:Yarp.ReverseProxy.Model.DestinationModel">
            <summary>
            Immutable representation of the portions of a destination
            that only change in reaction to configuration changes
            (e.g. address).
            </summary>
            <remarks>
            All members must remain immutable to avoid thread safety issues.
            Instead, instances of <see cref="T:Yarp.ReverseProxy.Model.DestinationModel"/> are replaced
            in their entirety when values need to change.
            </remarks>
        </member>
        <member name="M:Yarp.ReverseProxy.Model.DestinationModel.#ctor(Yarp.ReverseProxy.Configuration.DestinationConfig)">
            <summary>
            Creates a new instance. This constructor is for tests and infrastructure, this type is normally constructed by
            the configuration loading infrastructure.
            </summary>
        </member>
        <member name="P:Yarp.ReverseProxy.Model.DestinationModel.Config">
            <summary>
            This destination's configuration.
            </summary>
        </member>
        <member name="T:Yarp.ReverseProxy.Model.DestinationState">
            <summary>
            Representation of a cluster's destination for use at runtime.
            </summary>
        </member>
        <member name="M:Yarp.ReverseProxy.Model.DestinationState.#ctor(System.String)">
            <summary>
            Creates a new instance. This constructor is for tests and infrastructure, this type is normally constructed by
            the configuration loading infrastructure.
            </summary>
        </member>
        <member name="P:Yarp.ReverseProxy.Model.DestinationState.DestinationId">
            <summary>
            The destination's unique id.
            </summary>
        </member>
        <member name="P:Yarp.ReverseProxy.Model.DestinationState.Model">
            <summary>
            A snapshot of the current configuration
            </summary>
        </member>
        <member name="P:Yarp.ReverseProxy.Model.DestinationState.Health">
            <summary>
            Mutable health state for this destination.
            </summary>
        </member>
        <member name="P:Yarp.ReverseProxy.Model.DestinationState.ConcurrentRequestCount">
            <summary>
            Keeps track of the total number of concurrent requests on this endpoint.
            The setter should only be used for testing purposes.
            </summary>
        </member>
        <member name="T:Yarp.ReverseProxy.Model.IClusterChangeListener">
            <summary>
            Listener for changes in the clusters.
            </summary>
        </member>
        <member name="M:Yarp.ReverseProxy.Model.IClusterChangeListener.OnClusterAdded(Yarp.ReverseProxy.Model.ClusterState)">
            <summary>
            Gets called after a new <see cref="T:Yarp.ReverseProxy.Model.ClusterState"/> has been added.
            </summary>
            <param name="cluster">Added <see cref="T:Yarp.ReverseProxy.Model.ClusterState"/> instance.</param>
        </member>
        <member name="M:Yarp.ReverseProxy.Model.IClusterChangeListener.OnClusterChanged(Yarp.ReverseProxy.Model.ClusterState)">
            <summary>
            Gets called after an existing <see cref="T:Yarp.ReverseProxy.Model.ClusterState"/> has been changed.
            </summary>
            <param name="cluster">Changed <see cref="T:Yarp.ReverseProxy.Model.ClusterState"/> instance.</param>
        </member>
        <member name="M:Yarp.ReverseProxy.Model.IClusterChangeListener.OnClusterRemoved(Yarp.ReverseProxy.Model.ClusterState)">
            <summary>
            Gets called after an existing <see cref="T:Yarp.ReverseProxy.Model.ClusterState"/> has been removed.
            </summary>
            <param name="cluster">Removed <see cref="T:Yarp.ReverseProxy.Model.ClusterState"/> instance.</param>
        </member>
        <member name="T:Yarp.ReverseProxy.Model.IReverseProxyFeature">
            <summary>
            Stores the current proxy configuration used when processing the request.
            </summary>
        </member>
        <member name="P:Yarp.ReverseProxy.Model.IReverseProxyFeature.Route">
            <summary>
            The route model for the current request.
            </summary>
        </member>
        <member name="P:Yarp.ReverseProxy.Model.IReverseProxyFeature.Cluster">
            <summary>
            The cluster model for the current request.
            </summary>
        </member>
        <member name="P:Yarp.ReverseProxy.Model.IReverseProxyFeature.AllDestinations">
            <summary>
            All destinations for the current cluster.
            </summary>
        </member>
        <member name="P:Yarp.ReverseProxy.Model.IReverseProxyFeature.AvailableDestinations">
            <summary>
            Cluster destinations that can handle the current request. This will initially include all destinations except those
            currently marked as unhealth if health checks are enabled.
            </summary>
        </member>
        <member name="P:Yarp.ReverseProxy.Model.IReverseProxyFeature.ProxiedDestination">
            <summary>
            The actual destination that the request was proxied to.
            </summary>
        </member>
        <member name="T:Yarp.ReverseProxy.Model.ProxyPipelineInitializerMiddleware">
            <summary>
            Initializes the proxy processing pipeline with the available healthy destinations.
            </summary>
        </member>
        <member name="T:Yarp.ReverseProxy.Model.ReverseProxyFeature">
            <summary>
            Stores the current proxy configuration used when processing the request.
            </summary>
        </member>
        <member name="P:Yarp.ReverseProxy.Model.ReverseProxyFeature.Route">
            <inheritdoc/>
        </member>
        <member name="P:Yarp.ReverseProxy.Model.ReverseProxyFeature.Cluster">
            <inheritdoc/>
        </member>
        <member name="P:Yarp.ReverseProxy.Model.ReverseProxyFeature.AllDestinations">
            <inheritdoc/>
        </member>
        <member name="P:Yarp.ReverseProxy.Model.ReverseProxyFeature.AvailableDestinations">
            <inheritdoc/>
        </member>
        <member name="P:Yarp.ReverseProxy.Model.ReverseProxyFeature.ProxiedDestination">
            <inheritdoc/>
        </member>
        <member name="T:Yarp.ReverseProxy.Model.RouteModel">
            <summary>
            Immutable representation of the portions of a route
            that only change in reaction to configuration changes.
            </summary>
            <remarks>
            All members must remain immutable to avoid thread safety issues.
            Instead, instances of <see cref="T:Yarp.ReverseProxy.Model.RouteModel"/> are replaced
            in their entirety when values need to change.
            </remarks>
        </member>
        <member name="M:Yarp.ReverseProxy.Model.RouteModel.#ctor(Yarp.ReverseProxy.Configuration.RouteConfig,Yarp.ReverseProxy.Model.ClusterState,Yarp.ReverseProxy.Forwarder.HttpTransformer)">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="P:Yarp.ReverseProxy.Model.RouteModel.Cluster">
            <summary>
            The <see cref="T:Yarp.ReverseProxy.Model.ClusterState"/> instance associated with this route.
            </summary>
        </member>
        <member name="P:Yarp.ReverseProxy.Model.RouteModel.Transformer">
            <summary>
            Transforms to apply for this route.
            </summary>
        </member>
        <member name="P:Yarp.ReverseProxy.Model.RouteModel.Config">
            <summary>
            The configuration data used to build this route.
            </summary>
        </member>
        <member name="T:Yarp.ReverseProxy.Model.RouteState">
            <summary>
            Representation of a route for use at runtime.
            </summary>
        </member>
        <member name="P:Yarp.ReverseProxy.Model.RouteState.Model">
            <summary>
            Encapsulates parts of a route that can change atomically
            in reaction to config changes.
            </summary>
        </member>
        <member name="P:Yarp.ReverseProxy.Model.RouteState.ClusterRevision">
            <summary>
            Tracks changes to the cluster configuration for use with rebuilding the route endpoint.
            </summary>
        </member>
        <member name="P:Yarp.ReverseProxy.Model.RouteState.CachedEndpoint">
            <summary>
            A cached Endpoint that will be cleared and rebuilt if the RouteConfig or cluster config change.
            </summary>
        </member>
        <member name="T:Yarp.ReverseProxy.Routing.HeaderMatcher">
            <summary>
            A request header matcher used during routing.
            </summary>
        </member>
        <member name="M:Yarp.ReverseProxy.Routing.HeaderMatcher.#ctor(System.String,System.Collections.Generic.IReadOnlyList{System.String},Yarp.ReverseProxy.Configuration.HeaderMatchMode,System.Boolean)">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="P:Yarp.ReverseProxy.Routing.HeaderMatcher.Name">
            <summary>
            Name of the header to look for.
            </summary>
        </member>
        <member name="P:Yarp.ReverseProxy.Routing.HeaderMatcher.Values">
            <summary>
            Returns a read-only collection of acceptable header values used during routing.
            At least one value is required unless <see cref="P:Yarp.ReverseProxy.Routing.HeaderMatcher.Mode"/> is set to <see cref="F:Yarp.ReverseProxy.Configuration.HeaderMatchMode.Exists"/>
            or <see cref="F:Yarp.ReverseProxy.Configuration.HeaderMatchMode.NotExists"/>.
            </summary>
        </member>
        <member name="P:Yarp.ReverseProxy.Routing.HeaderMatcher.Mode">
            <summary>
            Specifies how header values should be compared (e.g. exact matches Vs. by prefix).
            Defaults to <see cref="F:Yarp.ReverseProxy.Configuration.HeaderMatchMode.ExactHeader"/>.
            </summary>
        </member>
        <member name="P:Yarp.ReverseProxy.Routing.HeaderMatcherPolicy.Order">
            <inheritdoc/>
        </member>
        <member name="P:Yarp.ReverseProxy.Routing.HeaderMatcherPolicy.Comparer">
            <inheritdoc/>
        </member>
        <member name="M:Yarp.ReverseProxy.Routing.HeaderMatcherPolicy.Microsoft#AspNetCore#Routing#Matching#IEndpointSelectorPolicy#AppliesToEndpoints(System.Collections.Generic.IReadOnlyList{Microsoft.AspNetCore.Http.Endpoint})">
            <inheritdoc/>
        </member>
        <member name="M:Yarp.ReverseProxy.Routing.HeaderMatcherPolicy.ApplyAsync(Microsoft.AspNetCore.Http.HttpContext,Microsoft.AspNetCore.Routing.Matching.CandidateSet)">
            <inheritdoc/>
        </member>
        <member name="T:Yarp.ReverseProxy.Routing.HeaderMetadata">
            <summary>
            Represents request header metadata used during routing.
            </summary>
        </member>
        <member name="P:Yarp.ReverseProxy.Routing.HeaderMetadata.Matchers">
            <inheritdoc/>
        </member>
        <member name="T:Yarp.ReverseProxy.Routing.IHeaderMetadata">
            <summary>
            Represents request header metadata used during routing.
            </summary>
        </member>
        <member name="P:Yarp.ReverseProxy.Routing.IHeaderMetadata.Matchers">
            <summary>
            One or more matchers to apply to the request headers.
            </summary>
        </member>
        <member name="T:Yarp.ReverseProxy.Routing.IQueryParameterMetadata">
            <summary>
            Represents request query parameter metadata used during routing.
            </summary>
        </member>
        <member name="P:Yarp.ReverseProxy.Routing.IQueryParameterMetadata.Matchers">
            <summary>
            One or more matchers to apply to the request query parameters.
            </summary>
        </member>
        <member name="T:Yarp.ReverseProxy.Routing.QueryParameterMatcher">
            <summary>
            A request query parameter matcher used during routing.
            </summary>
        </member>
        <member name="M:Yarp.ReverseProxy.Routing.QueryParameterMatcher.#ctor(System.String,System.Collections.Generic.IReadOnlyList{System.String},Yarp.ReverseProxy.Configuration.QueryParameterMatchMode,System.Boolean)">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="P:Yarp.ReverseProxy.Routing.QueryParameterMatcher.Name">
            <summary>
            Name of the query parameter to look for.
            </summary>
        </member>
        <member name="P:Yarp.ReverseProxy.Routing.QueryParameterMatcher.Values">
            <summary>
            Returns a read-only collection of acceptable query parameter values used during routing.
            At least one value is required unless <see cref="P:Yarp.ReverseProxy.Routing.QueryParameterMatcher.Mode"/> is set to <see cref="F:Yarp.ReverseProxy.Configuration.QueryParameterMatchMode.Exists"/>.
            </summary>
        </member>
        <member name="P:Yarp.ReverseProxy.Routing.QueryParameterMatcher.Mode">
            <summary>
            Specifies how query parameter values should be compared (e.g. exact matches Vs. contains).
            Defaults to <see cref="F:Yarp.ReverseProxy.Configuration.QueryParameterMatchMode.Exact"/>.
            </summary>
        </member>
        <member name="P:Yarp.ReverseProxy.Routing.QueryParameterMatcherPolicy.Order">
            <inheritdoc/>
        </member>
        <member name="P:Yarp.ReverseProxy.Routing.QueryParameterMatcherPolicy.Comparer">
            <inheritdoc/>
        </member>
        <member name="M:Yarp.ReverseProxy.Routing.QueryParameterMatcherPolicy.Microsoft#AspNetCore#Routing#Matching#IEndpointSelectorPolicy#AppliesToEndpoints(System.Collections.Generic.IReadOnlyList{Microsoft.AspNetCore.Http.Endpoint})">
            <inheritdoc/>
        </member>
        <member name="M:Yarp.ReverseProxy.Routing.QueryParameterMatcherPolicy.ApplyAsync(Microsoft.AspNetCore.Http.HttpContext,Microsoft.AspNetCore.Routing.Matching.CandidateSet)">
            <inheritdoc/>
        </member>
        <member name="T:Yarp.ReverseProxy.Routing.QueryParameterMetadata">
            <summary>
            Represents request query parameter metadata used during routing.
            </summary>
        </member>
        <member name="P:Yarp.ReverseProxy.Routing.QueryParameterMetadata.Matchers">
            <inheritdoc/>
        </member>
        <member name="T:Yarp.ReverseProxy.SessionAffinity.AffinitizeTransform">
            <summary>
            Affinitizes the request to a chosen <see cref="T:Yarp.ReverseProxy.Model.DestinationState"/>.
            </summary>
        </member>
        <member name="T:Yarp.ReverseProxy.SessionAffinity.AffinityResult">
            <summary>
            Affinity resolution result.
            </summary>
        </member>
        <member name="T:Yarp.ReverseProxy.SessionAffinity.AffinityStatus">
            <summary>
            Affinity resolution status.
            </summary>
        </member>
        <member name="T:Yarp.ReverseProxy.SessionAffinity.IAffinityFailurePolicy">
            <summary>
            Affinity failures handling policy.
            </summary>
        </member>
        <member name="P:Yarp.ReverseProxy.SessionAffinity.IAffinityFailurePolicy.Name">
            <summary>
             A unique identifier for this failure policy. This will be referenced from config.
            </summary>
        </member>
        <member name="M:Yarp.ReverseProxy.SessionAffinity.IAffinityFailurePolicy.Handle(Microsoft.AspNetCore.Http.HttpContext,Yarp.ReverseProxy.Model.ClusterState,Yarp.ReverseProxy.SessionAffinity.AffinityStatus)">
            <summary>
            Handles affinity failures. This method assumes the full control on <see cref="T:Microsoft.AspNetCore.Http.HttpContext"/>
            and can change it in any way.
            </summary>
            <param name="context">Current request's context.</param>
            <param name="cluster">The associated cluster for the request.</param>
            <param name="affinityStatus">Affinity resolution status.</param>
            <returns>
            'true' if the failure is considered recoverable and the request processing can proceed.
            Otherwise, 'false' indicating that an error response has been generated and the request's processing must be terminated.
            </returns>
        </member>
        <member name="T:Yarp.ReverseProxy.SessionAffinity.ISessionAffinityPolicy">
            <summary>
            Provides session affinity for load-balanced clusters.
            </summary>
        </member>
        <member name="P:Yarp.ReverseProxy.SessionAffinity.ISessionAffinityPolicy.Name">
            <summary>
             A unique identifier for this session affinity implementation. This will be referenced from config.
            </summary>
        </member>
        <member name="M:Yarp.ReverseProxy.SessionAffinity.ISessionAffinityPolicy.FindAffinitizedDestinations(Microsoft.AspNetCore.Http.HttpContext,Yarp.ReverseProxy.Model.ClusterState,Yarp.ReverseProxy.Configuration.SessionAffinityConfig,System.Collections.Generic.IReadOnlyList{Yarp.ReverseProxy.Model.DestinationState})">
            <summary>
            Finds <see cref="T:Yarp.ReverseProxy.Model.DestinationState"/> to which the current request is affinitized by the affinity key.
            </summary>
            <param name="context">Current request's context.</param>
            <param name="cluster">Current request's cluster.</param>
            <param name="config">Affinity config.</param>
            <param name="destinations"><see cref="T:Yarp.ReverseProxy.Model.DestinationState"/>s available for the request.</param>
            <returns><see cref="T:Yarp.ReverseProxy.SessionAffinity.AffinityResult"/> carrying the found affinitized destinations if any and the <see cref="T:Yarp.ReverseProxy.SessionAffinity.AffinityStatus"/>.</returns>
        </member>
        <member name="M:Yarp.ReverseProxy.SessionAffinity.ISessionAffinityPolicy.FindAffinitizedDestinationsAsync(Microsoft.AspNetCore.Http.HttpContext,Yarp.ReverseProxy.Model.ClusterState,Yarp.ReverseProxy.Configuration.SessionAffinityConfig,System.Collections.Generic.IReadOnlyList{Yarp.ReverseProxy.Model.DestinationState},System.Threading.CancellationToken)">
            <summary>
            Finds <see cref="T:Yarp.ReverseProxy.Model.DestinationState"/> to which the current request is affinitized by the affinity key.
            </summary>
            <param name="context">Current request's context.</param>
            <param name="cluster">Current request's cluster.</param>
            <param name="config">Affinity config.</param>
            <param name="destinations"><see cref="T:Yarp.ReverseProxy.Model.DestinationState"/>s available for the request.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests.</param>
            <returns><see cref="T:Yarp.ReverseProxy.SessionAffinity.AffinityResult"/> carrying the found affinitized destinations if any and the <see cref="T:Yarp.ReverseProxy.SessionAffinity.AffinityStatus"/>.</returns>
        </member>
        <member name="M:Yarp.ReverseProxy.SessionAffinity.ISessionAffinityPolicy.AffinitizeResponse(Microsoft.AspNetCore.Http.HttpContext,Yarp.ReverseProxy.Model.ClusterState,Yarp.ReverseProxy.Configuration.SessionAffinityConfig,Yarp.ReverseProxy.Model.DestinationState)">
            <summary>
            Affinitize the current response to the given <see cref="T:Yarp.ReverseProxy.Model.DestinationState"/> by setting the affinity key extracted from <see cref="T:Yarp.ReverseProxy.Model.DestinationState"/>.
            </summary>
            <param name="context">Current request's context.</param>
            <param name="cluster">Current request's cluster.</param>
            <param name="config">Affinity config.</param>
            <param name="destination"><see cref="T:Yarp.ReverseProxy.Model.DestinationState"/> to which request is to be affinitized.</param>
        </member>
        <member name="M:Yarp.ReverseProxy.SessionAffinity.ISessionAffinityPolicy.AffinitizeResponseAsync(Microsoft.AspNetCore.Http.HttpContext,Yarp.ReverseProxy.Model.ClusterState,Yarp.ReverseProxy.Configuration.SessionAffinityConfig,Yarp.ReverseProxy.Model.DestinationState,System.Threading.CancellationToken)">
            <summary>
            Affinitize the current response to the given <see cref="T:Yarp.ReverseProxy.Model.DestinationState"/> by setting the affinity key extracted from <see cref="T:Yarp.ReverseProxy.Model.DestinationState"/>.
            </summary>
            <param name="context">Current request's context.</param>
            <param name="cluster">Current request's cluster.</param>
            <param name="config">Affinity config.</param>
            <param name="destination"><see cref="T:Yarp.ReverseProxy.Model.DestinationState"/> to which request is to be affinitized.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests.</param>
        </member>
        <member name="T:Yarp.ReverseProxy.SessionAffinity.SessionAffinityConstants">
            <summary>
            Names of built-in session affinity services.
            </summary>
        </member>
        <member name="T:Yarp.ReverseProxy.SessionAffinity.SessionAffinityMiddleware">
            <summary>
            Looks up an affinitized <see cref="T:Yarp.ReverseProxy.Model.DestinationState"/> matching the request's affinity key if any is set
            </summary>
        </member>
        <member name="T:Yarp.ReverseProxy.Transforms.Builder.ITransformBuilder">
            <summary>
            Validates and builds request and response transforms for a given route.
            </summary>
        </member>
        <member name="M:Yarp.ReverseProxy.Transforms.Builder.ITransformBuilder.ValidateRoute(Yarp.ReverseProxy.Configuration.RouteConfig)">
            <summary>
            Validates that each transform for the given route is known and has the expected parameters. All transforms are validated
            so all errors can be reported.
            </summary>
        </member>
        <member name="M:Yarp.ReverseProxy.Transforms.Builder.ITransformBuilder.ValidateCluster(Yarp.ReverseProxy.Configuration.ClusterConfig)">
            <summary>
            Validates that any cluster data needed for transforms is valid.
            </summary>
        </member>
        <member name="M:Yarp.ReverseProxy.Transforms.Builder.ITransformBuilder.Build(Yarp.ReverseProxy.Configuration.RouteConfig,Yarp.ReverseProxy.Configuration.ClusterConfig)">
            <summary>
            Builds the transforms for the given route into executable rules.
            </summary>
        </member>
        <member name="T:Yarp.ReverseProxy.Transforms.Builder.ITransformFactory">
            <summary>
            Validates and builds transforms from the given parameters
            </summary>
        </member>
        <member name="M:Yarp.ReverseProxy.Transforms.Builder.ITransformFactory.Validate(Yarp.ReverseProxy.Transforms.Builder.TransformRouteValidationContext,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String})">
            <summary>
            Checks if the given transform values match a known transform, and if those values have any errors.
            </summary>
            <param name="context">The context to add any generated errors to.</param>
            <param name="transformValues">The transform values to validate.</param>
            <returns>True if this factory matches the given transform, otherwise false.</returns>
        </member>
        <member name="M:Yarp.ReverseProxy.Transforms.Builder.ITransformFactory.Build(Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String})">
            <summary>
            Checks if the given transform values match a known transform, and if so, generates a transform and
            adds it to the context. This can throw if the transform values are invalid.
            </summary>
            <param name="context">The context to add any generated transforms to.</param>
            <param name="transformValues">The transform values to use as input.</param>
            <returns>True if this factory matches the given transform, otherwise false.</returns>
        </member>
        <member name="T:Yarp.ReverseProxy.Transforms.Builder.ITransformProvider">
            <summary>
            Enables the implementor to inspect each route and conditionally add transforms.
            </summary>
        </member>
        <member name="M:Yarp.ReverseProxy.Transforms.Builder.ITransformProvider.ValidateRoute(Yarp.ReverseProxy.Transforms.Builder.TransformRouteValidationContext)">
            <summary>
            Validates any route data needed for transforms.
            </summary>
            <param name="context">The context to add any generated errors to.</param>
        </member>
        <member name="M:Yarp.ReverseProxy.Transforms.Builder.ITransformProvider.ValidateCluster(Yarp.ReverseProxy.Transforms.Builder.TransformClusterValidationContext)">
            <summary>
            Validates any cluster data needed for transforms.
            </summary>
            <param name="context">The context to add any generated errors to.</param>
        </member>
        <member name="M:Yarp.ReverseProxy.Transforms.Builder.ITransformProvider.Apply(Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext)">
            <summary>
            Inspect the given route and conditionally add transforms.
            This is called for every route, each time that route is built.
            </summary>
            <param name="context">The context to add any generated transforms to.</param>
        </member>
        <member name="T:Yarp.ReverseProxy.Transforms.Builder.StructuredTransformer">
            <summary>
            Transforms for a given route.
            </summary>
        </member>
        <member name="M:Yarp.ReverseProxy.Transforms.Builder.StructuredTransformer.#ctor(System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Collections.Generic.IList{Yarp.ReverseProxy.Transforms.RequestTransform},System.Collections.Generic.IList{Yarp.ReverseProxy.Transforms.ResponseTransform},System.Collections.Generic.IList{Yarp.ReverseProxy.Transforms.ResponseTrailersTransform})">
            <summary>
            Creates a new <see cref="T:Yarp.ReverseProxy.Transforms.Builder.StructuredTransformer"/> instance.
            </summary>
        </member>
        <member name="P:Yarp.ReverseProxy.Transforms.Builder.StructuredTransformer.ShouldCopyRequestHeaders">
            <summary>
            Indicates if all request headers should be copied to the proxy request before applying transforms.
            </summary>
        </member>
        <member name="P:Yarp.ReverseProxy.Transforms.Builder.StructuredTransformer.ShouldCopyResponseHeaders">
            <summary>
            Indicates if all response headers should be copied to the client response before applying transforms.
            </summary>
        </member>
        <member name="P:Yarp.ReverseProxy.Transforms.Builder.StructuredTransformer.ShouldCopyResponseTrailers">
            <summary>
            Indicates if all response trailers should be copied to the client response before applying transforms.
            </summary>
        </member>
        <member name="P:Yarp.ReverseProxy.Transforms.Builder.StructuredTransformer.RequestTransforms">
            <summary>
            Request transforms.
            </summary>
        </member>
        <member name="P:Yarp.ReverseProxy.Transforms.Builder.StructuredTransformer.ResponseTransforms">
            <summary>
            Response header transforms.
            </summary>
        </member>
        <member name="P:Yarp.ReverseProxy.Transforms.Builder.StructuredTransformer.ResponseTrailerTransforms">
            <summary>
            Response trailer transforms.
            </summary>
        </member>
        <member name="T:Yarp.ReverseProxy.Transforms.Builder.TransformBuilder">
            <summary>
            Validates and builds request and response transforms for a given route.
            </summary>
        </member>
        <member name="M:Yarp.ReverseProxy.Transforms.Builder.TransformBuilder.#ctor(System.IServiceProvider,System.Collections.Generic.IEnumerable{Yarp.ReverseProxy.Transforms.Builder.ITransformFactory},System.Collections.Generic.IEnumerable{Yarp.ReverseProxy.Transforms.Builder.ITransformProvider})">
            <summary>
            Creates a new <see cref="T:Yarp.ReverseProxy.Transforms.Builder.TransformBuilder"/>
            </summary>
        </member>
        <member name="M:Yarp.ReverseProxy.Transforms.Builder.TransformBuilder.ValidateRoute(Yarp.ReverseProxy.Configuration.RouteConfig)">
            <inheritdoc/>
        </member>
        <member name="M:Yarp.ReverseProxy.Transforms.Builder.TransformBuilder.ValidateCluster(Yarp.ReverseProxy.Configuration.ClusterConfig)">
            <inheritdoc/>
        </member>
        <member name="M:Yarp.ReverseProxy.Transforms.Builder.TransformBuilder.Build(Yarp.ReverseProxy.Configuration.RouteConfig,Yarp.ReverseProxy.Configuration.ClusterConfig)">
            <inheritdoc/>
        </member>
        <member name="T:Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext">
            <summary>
            State used when building transforms for the given route.
            </summary>
        </member>
        <member name="P:Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext.Services">
            <summary>
            Application services that can be used to construct transforms.
            </summary>
        </member>
        <member name="P:Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext.Route">
            <summary>
            The route these transforms will be associated with.
            </summary>
        </member>
        <member name="P:Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext.Cluster">
            <summary>
            The cluster config used by the route.
            This may be null if the route is not currently paired with a cluster.
            </summary>
        </member>
        <member name="P:Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext.CopyRequestHeaders">
            <summary>
            Indicates if request headers should all be copied to the proxy request before transforms are applied.
            </summary>
        </member>
        <member name="P:Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext.CopyResponseHeaders">
            <summary>
            Indicates if response headers should all be copied to the client response before transforms are applied.
            </summary>
        </member>
        <member name="P:Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext.CopyResponseTrailers">
            <summary>
            Indicates if response trailers should all be copied to the client response before transforms are applied.
            </summary>
        </member>
        <member name="P:Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext.UseDefaultForwarders">
            <summary>
            Indicates if default x-fowarded-* transforms should be added to this route. Disable this if you do not want
            x-forwarded-* headers or have configured your own.
            </summary>
        </member>
        <member name="P:Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext.RequestTransforms">
            <summary>
            Add request transforms here for the given route.
            </summary>
        </member>
        <member name="P:Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext.ResponseTransforms">
            <summary>
            Add response transforms here for the given route.
            </summary>
        </member>
        <member name="P:Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext.ResponseTrailersTransforms">
            <summary>
            Add response trailers transforms here for the given route.
            </summary>
        </member>
        <member name="T:Yarp.ReverseProxy.Transforms.Builder.TransformClusterValidationContext">
            <summary>
            State used when validating transforms for the given cluster.
            </summary>
        </member>
        <member name="P:Yarp.ReverseProxy.Transforms.Builder.TransformClusterValidationContext.Services">
            <summary>
            Application services that can be used to validate transforms.
            </summary>
        </member>
        <member name="P:Yarp.ReverseProxy.Transforms.Builder.TransformClusterValidationContext.Cluster">
            <summary>
            The cluster configuration that may be used when creating transforms.
            </summary>
        </member>
        <member name="P:Yarp.ReverseProxy.Transforms.Builder.TransformClusterValidationContext.Errors">
            <summary>
            The accumulated list of validation errors for this cluster.
            Add validation errors here.
            </summary>
        </member>
        <member name="T:Yarp.ReverseProxy.Transforms.Builder.TransformRouteValidationContext">
            <summary>
            State used when validating transforms for the given route.
            </summary>
        </member>
        <member name="P:Yarp.ReverseProxy.Transforms.Builder.TransformRouteValidationContext.Services">
            <summary>
            Application services that can be used to validate transforms.
            </summary>
        </member>
        <member name="P:Yarp.ReverseProxy.Transforms.Builder.TransformRouteValidationContext.Route">
            <summary>
            The route these transforms are associated with.
            </summary>
        </member>
        <member name="P:Yarp.ReverseProxy.Transforms.Builder.TransformRouteValidationContext.Errors">
            <summary>
            The accumulated list of validation errors for this route.
            Add transform validation errors here.
            </summary>
        </member>
        <member name="T:Yarp.ReverseProxy.Transforms.ForwardedTransformExtensions">
            <summary>
            Extensions for adding forwarded header transforms.
            </summary>
        </member>
        <member name="M:Yarp.ReverseProxy.Transforms.ForwardedTransformExtensions.WithTransformXForwarded(Yarp.ReverseProxy.Configuration.RouteConfig,System.String,Yarp.ReverseProxy.Transforms.ForwardedTransformActions,System.Nullable{Yarp.ReverseProxy.Transforms.ForwardedTransformActions},System.Nullable{Yarp.ReverseProxy.Transforms.ForwardedTransformActions},System.Nullable{Yarp.ReverseProxy.Transforms.ForwardedTransformActions},System.Nullable{Yarp.ReverseProxy.Transforms.ForwardedTransformActions})">
            <summary>
            Clones the route and adds the transform which will add X-Forwarded-* headers.
            </summary>
        </member>
        <member name="M:Yarp.ReverseProxy.Transforms.ForwardedTransformExtensions.AddXForwardedFor(Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext,System.String,Yarp.ReverseProxy.Transforms.ForwardedTransformActions)">
            <summary>
            Adds the transform which will add X-Forwarded-For request header.
            </summary>
        </member>
        <member name="M:Yarp.ReverseProxy.Transforms.ForwardedTransformExtensions.AddXForwardedHost(Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext,System.String,Yarp.ReverseProxy.Transforms.ForwardedTransformActions)">
            <summary>
            Adds the transform which will add X-Forwarded-Host request header.
            </summary>
        </member>
        <member name="M:Yarp.ReverseProxy.Transforms.ForwardedTransformExtensions.AddXForwardedProto(Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext,System.String,Yarp.ReverseProxy.Transforms.ForwardedTransformActions)">
            <summary>
            Adds the transform which will add X-Forwarded-Proto request header.
            </summary>
        </member>
        <member name="M:Yarp.ReverseProxy.Transforms.ForwardedTransformExtensions.AddXForwardedPrefix(Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext,System.String,Yarp.ReverseProxy.Transforms.ForwardedTransformActions)">
            <summary>
            Adds the transform which will add X-Forwarded-Prefix request header.
            </summary>
        </member>
        <member name="M:Yarp.ReverseProxy.Transforms.ForwardedTransformExtensions.AddXForwarded(Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext,Yarp.ReverseProxy.Transforms.ForwardedTransformActions)">
            <summary>
            Adds the transform which will add X-Forwarded-* request headers.
            </summary>
        </member>
        <member name="M:Yarp.ReverseProxy.Transforms.ForwardedTransformExtensions.WithTransformForwarded(Yarp.ReverseProxy.Configuration.RouteConfig,System.Boolean,System.Boolean,Yarp.ReverseProxy.Transforms.NodeFormat,Yarp.ReverseProxy.Transforms.NodeFormat,Yarp.ReverseProxy.Transforms.ForwardedTransformActions)">
            <summary>
            Clones the route and adds the transform which will add the Forwarded header as defined by [RFC 7239](https://tools.ietf.org/html/rfc7239).
            </summary>
        </member>
        <member name="M:Yarp.ReverseProxy.Transforms.ForwardedTransformExtensions.AddForwarded(Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext,System.Boolean,System.Boolean,Yarp.ReverseProxy.Transforms.NodeFormat,Yarp.ReverseProxy.Transforms.NodeFormat,Yarp.ReverseProxy.Transforms.ForwardedTransformActions)">
            <summary>
            Adds the transform which will add the Forwarded header as defined by [RFC 7239](https://tools.ietf.org/html/rfc7239).
            </summary>
        </member>
        <member name="M:Yarp.ReverseProxy.Transforms.ForwardedTransformExtensions.WithTransformClientCertHeader(Yarp.ReverseProxy.Configuration.RouteConfig,System.String)">
            <summary>
            Clones the route and adds the transform which will set the given header with the Base64 encoded client certificate.
            </summary>
        </member>
        <member name="M:Yarp.ReverseProxy.Transforms.ForwardedTransformExtensions.AddClientCertHeader(Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext,System.String)">
            <summary>
            Adds the transform which will set the given header with the Base64 encoded client certificate.
            </summary>
        </member>
        <member name="T:Yarp.ReverseProxy.Transforms.HttpMethodChangeTransform">
            <summary>
            Replaces the HTTP method if it matches.
            </summary>
        </member>
        <member name="M:Yarp.ReverseProxy.Transforms.HttpMethodChangeTransform.#ctor(System.String,System.String)">
            <summary>
            Creates a new transform.
            </summary>
            <param name="fromMethod">The method to match.</param>
            <param name="toMethod">The method to it change to.</param>
        </member>
        <member name="M:Yarp.ReverseProxy.Transforms.HttpMethodChangeTransform.ApplyAsync(Yarp.ReverseProxy.Transforms.RequestTransformContext)">
            <inheritdoc/>
        </member>
        <member name="T:Yarp.ReverseProxy.Transforms.HttpMethodTransformExtensions">
            <summary>
            Extensions for modifying the request method.
            </summary>
        </member>
        <member name="M:Yarp.ReverseProxy.Transforms.HttpMethodTransformExtensions.WithTransformHttpMethodChange(Yarp.ReverseProxy.Configuration.RouteConfig,System.String,System.String)">
            <summary>
            Clones the route and adds the transform that will replace the HTTP method if it matches.
            </summary>
        </member>
        <member name="M:Yarp.ReverseProxy.Transforms.HttpMethodTransformExtensions.AddHttpMethodChange(Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext,System.String,System.String)">
            <summary>
            Adds the transform that will replace the HTTP method if it matches.
            </summary>
        </member>
        <member name="T:Yarp.ReverseProxy.Transforms.NodeFormat">
            <summary>
            For use with <see cref="T:Yarp.ReverseProxy.Transforms.RequestHeaderForwardedTransform"/>.
            </summary>
        </member>
        <member name="T:Yarp.ReverseProxy.Transforms.PathRouteValuesTransform">
            <summary>
            Generates a new request path by plugging matched route parameters into the given pattern.
            </summary>
        </member>
        <member name="M:Yarp.ReverseProxy.Transforms.PathRouteValuesTransform.#ctor(System.String,Microsoft.AspNetCore.Routing.Template.TemplateBinderFactory)">
            <summary>
            Creates a new transform.
            </summary>
            <param name="pattern">The pattern used to create the new request path.</param>
            <param name="binderFactory">The factory used to bind route parameters to the given path pattern.</param>
        </member>
        <member name="M:Yarp.ReverseProxy.Transforms.PathRouteValuesTransform.ApplyAsync(Yarp.ReverseProxy.Transforms.RequestTransformContext)">
            <inheritdoc/>
        </member>
        <member name="T:Yarp.ReverseProxy.Transforms.PathStringTransform">
            <summary>
            Modifies the proxy request Path with the given value.
            </summary>
        </member>
        <member name="M:Yarp.ReverseProxy.Transforms.PathStringTransform.#ctor(Yarp.ReverseProxy.Transforms.PathStringTransform.PathTransformMode,Microsoft.AspNetCore.Http.PathString)">
            <summary>
            Creates a new transform.
            </summary>
            <param name="mode">A <see cref="T:Yarp.ReverseProxy.Transforms.PathStringTransform.PathTransformMode"/> indicating how the given value should update the existing path.</param>
            <param name="value">The path value used to update the existing value.</param>
        </member>
        <member name="M:Yarp.ReverseProxy.Transforms.PathStringTransform.ApplyAsync(Yarp.ReverseProxy.Transforms.RequestTransformContext)">
            <inheritdoc/>
        </member>
        <member name="T:Yarp.ReverseProxy.Transforms.PathTransformExtensions">
            <summary>
            Extensions for adding path transforms.
            </summary>
        </member>
        <member name="M:Yarp.ReverseProxy.Transforms.PathTransformExtensions.WithTransformPathSet(Yarp.ReverseProxy.Configuration.RouteConfig,Microsoft.AspNetCore.Http.PathString)">
            <summary>
            Clones the route and adds the transform which sets the request path with the given value.
            </summary>
        </member>
        <member name="M:Yarp.ReverseProxy.Transforms.PathTransformExtensions.AddPathSet(Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext,Microsoft.AspNetCore.Http.PathString)">
            <summary>
            Adds the transform which sets the request path with the given value.
            </summary>
        </member>
        <member name="M:Yarp.ReverseProxy.Transforms.PathTransformExtensions.WithTransformPathPrefix(Yarp.ReverseProxy.Configuration.RouteConfig,Microsoft.AspNetCore.Http.PathString)">
            <summary>
            Clones the route and adds the transform which will prefix the request path with the given value.
            </summary>
        </member>
        <member name="M:Yarp.ReverseProxy.Transforms.PathTransformExtensions.AddPathPrefix(Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext,Microsoft.AspNetCore.Http.PathString)">
            <summary>
            Adds the transform which will prefix the request path with the given value.
            </summary>
        </member>
        <member name="M:Yarp.ReverseProxy.Transforms.PathTransformExtensions.WithTransformPathRemovePrefix(Yarp.ReverseProxy.Configuration.RouteConfig,Microsoft.AspNetCore.Http.PathString)">
            <summary>
            Clones the route and adds the transform which will remove the matching prefix from the request path.
            </summary>
        </member>
        <member name="M:Yarp.ReverseProxy.Transforms.PathTransformExtensions.AddPathRemovePrefix(Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext,Microsoft.AspNetCore.Http.PathString)">
            <summary>
            Adds the transform which will remove the matching prefix from the request path.
            </summary>
        </member>
        <member name="M:Yarp.ReverseProxy.Transforms.PathTransformExtensions.WithTransformPathRouteValues(Yarp.ReverseProxy.Configuration.RouteConfig,Microsoft.AspNetCore.Http.PathString)">
            <summary>
            Clones the route and adds the transform which will set the request path with the given value.
            </summary>
        </member>
        <member name="M:Yarp.ReverseProxy.Transforms.PathTransformExtensions.AddPathRouteValues(Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext,Microsoft.AspNetCore.Http.PathString)">
            <summary>
            Clones the route and adds the transform which will set the request path with the given value.
            </summary>
        </member>
        <member name="M:Yarp.ReverseProxy.Transforms.QueryParameterRouteTransform.GetValue(Yarp.ReverseProxy.Transforms.RequestTransformContext)">
            <inheritdoc/>
        </member>
        <member name="M:Yarp.ReverseProxy.Transforms.QueryParameterFromStaticTransform.GetValue(Yarp.ReverseProxy.Transforms.RequestTransformContext)">
            <inheritdoc/>
        </member>
        <member name="T:Yarp.ReverseProxy.Transforms.QueryParameterRemoveTransform">
            <summary>
            A request transform that removes the given query parameter.
            </summary>
        </member>
        <member name="M:Yarp.ReverseProxy.Transforms.QueryParameterRemoveTransform.ApplyAsync(Yarp.ReverseProxy.Transforms.RequestTransformContext)">
            <inheritdoc/>
        </member>
        <member name="M:Yarp.ReverseProxy.Transforms.QueryParameterTransform.ApplyAsync(Yarp.ReverseProxy.Transforms.RequestTransformContext)">
            <inheritdoc/>
        </member>
        <member name="T:Yarp.ReverseProxy.Transforms.QueryTransformContext">
            <summary>
            Transform state for use with <see cref="T:Yarp.ReverseProxy.Transforms.RequestTransform"/>
            </summary>
        </member>
        <member name="T:Yarp.ReverseProxy.Transforms.QueryTransformExtensions">
            <summary>
            Extensions for adding query transforms.
            </summary>
        </member>
        <member name="M:Yarp.ReverseProxy.Transforms.QueryTransformExtensions.WithTransformQueryValue(Yarp.ReverseProxy.Configuration.RouteConfig,System.String,System.String,System.Boolean)">
            <summary>
            Clones the route and adds the transform that will append or set the query parameter from the given value.
            </summary>
        </member>
        <member name="M:Yarp.ReverseProxy.Transforms.QueryTransformExtensions.AddQueryValue(Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext,System.String,System.String,System.Boolean)">
            <summary>
            Adds the transform that will append or set the query parameter from the given value.
            </summary>
        </member>
        <member name="M:Yarp.ReverseProxy.Transforms.QueryTransformExtensions.WithTransformQueryRouteValue(Yarp.ReverseProxy.Configuration.RouteConfig,System.String,System.String,System.Boolean)">
            <summary>
            Clones the route and adds the transform that will append or set the query parameter from a route value.
            </summary>
        </member>
        <member name="M:Yarp.ReverseProxy.Transforms.QueryTransformExtensions.AddQueryRouteValue(Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext,System.String,System.String,System.Boolean)">
            <summary>
            Adds the transform that will append or set the query parameter from a route value.
            </summary>
        </member>
        <member name="M:Yarp.ReverseProxy.Transforms.QueryTransformExtensions.WithTransformQueryRemoveKey(Yarp.ReverseProxy.Configuration.RouteConfig,System.String)">
            <summary>
            Clones the route and adds the transform that will remove the given query key.
            </summary>
        </member>
        <member name="M:Yarp.ReverseProxy.Transforms.QueryTransformExtensions.AddQueryRemoveKey(Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext,System.String)">
            <summary>
            Adds the transform that will remove the given query key.
            </summary>
        </member>
        <member name="T:Yarp.ReverseProxy.Transforms.RequestFuncTransform">
            <summary>
            A request transform that runs the given Func.
            </summary>
        </member>
        <member name="M:Yarp.ReverseProxy.Transforms.RequestFuncTransform.ApplyAsync(Yarp.ReverseProxy.Transforms.RequestTransformContext)">
            <inheritdoc/>
        </member>
        <member name="T:Yarp.ReverseProxy.Transforms.RequestHeaderClientCertTransform">
            <summary>
            Base64 encodes the client certificate (if any) and sets it as the header value.
            </summary>
        </member>
        <member name="M:Yarp.ReverseProxy.Transforms.RequestHeaderClientCertTransform.ApplyAsync(Yarp.ReverseProxy.Transforms.RequestTransformContext)">
            <inheritdoc/>
        </member>
        <member name="T:Yarp.ReverseProxy.Transforms.RequestHeaderForwardedTransform">
            <summary>
            An implementation of the Forwarded header as defined in https://tools.ietf.org/html/rfc7239.
            </summary>
        </member>
        <member name="M:Yarp.ReverseProxy.Transforms.RequestHeaderForwardedTransform.ApplyAsync(Yarp.ReverseProxy.Transforms.RequestTransformContext)">
            <inheritdoc/>
        </member>
        <member name="T:Yarp.ReverseProxy.Transforms.RequestHeaderOriginalHostTransform">
            <summary>
            A transform used to include or suppress the original request host header.
            </summary>
        </member>
        <member name="M:Yarp.ReverseProxy.Transforms.RequestHeaderOriginalHostTransform.#ctor(System.Boolean)">
            <summary>
            Creates a new <see cref="T:Yarp.ReverseProxy.Transforms.RequestHeaderOriginalHostTransform"/>.
            </summary>
            <param name="useOriginalHost">True of the original request host header should be used,
            false otherwise.</param>
        </member>
        <member name="T:Yarp.ReverseProxy.Transforms.RequestHeaderRemoveTransform">
            <summary>
            Removes a request header.
            </summary>
        </member>
        <member name="M:Yarp.ReverseProxy.Transforms.RequestHeaderRemoveTransform.ApplyAsync(Yarp.ReverseProxy.Transforms.RequestTransformContext)">
            <inheritdoc/>
        </member>
        <member name="T:Yarp.ReverseProxy.Transforms.RequestHeadersAllowedTransform">
            <summary>
            Copies only allowed request headers.
            </summary>
        </member>
        <member name="M:Yarp.ReverseProxy.Transforms.RequestHeadersAllowedTransform.ApplyAsync(Yarp.ReverseProxy.Transforms.RequestTransformContext)">
            <inheritdoc/>
        </member>
        <member name="T:Yarp.ReverseProxy.Transforms.RequestHeadersTransformExtensions">
            <summary>
            Extensions for adding request header transforms.
            </summary>
        </member>
        <member name="M:Yarp.ReverseProxy.Transforms.RequestHeadersTransformExtensions.WithTransformCopyRequestHeaders(Yarp.ReverseProxy.Configuration.RouteConfig,System.Boolean)">
            <summary>
            Clones the route and adds the transform which will enable or suppress copying request headers to the proxy request.
            </summary>
        </member>
        <member name="M:Yarp.ReverseProxy.Transforms.RequestHeadersTransformExtensions.WithTransformUseOriginalHostHeader(Yarp.ReverseProxy.Configuration.RouteConfig,System.Boolean)">
            <summary>
            Clones the route and adds the transform which will copy the incoming request Host header to the proxy request.
            </summary>
        </member>
        <member name="M:Yarp.ReverseProxy.Transforms.RequestHeadersTransformExtensions.WithTransformRequestHeader(Yarp.ReverseProxy.Configuration.RouteConfig,System.String,System.String,System.Boolean)">
            <summary>
            Clones the route and adds the transform which will append or set the request header.
            </summary>
        </member>
        <member name="M:Yarp.ReverseProxy.Transforms.RequestHeadersTransformExtensions.WithTransformRequestHeaderRemove(Yarp.ReverseProxy.Configuration.RouteConfig,System.String)">
            <summary>
            Clones the route and adds the transform which will remove the request header.
            </summary>
        </member>
        <member name="M:Yarp.ReverseProxy.Transforms.RequestHeadersTransformExtensions.WithTransformRequestHeadersAllowed(Yarp.ReverseProxy.Configuration.RouteConfig,System.String[])">
            <summary>
            Clones the route and adds the transform which will only copy the allowed request headers. Other transforms
            that modify or append to existing headers may be affected if not included in the allow list.
            </summary>
        </member>
        <member name="M:Yarp.ReverseProxy.Transforms.RequestHeadersTransformExtensions.AddRequestHeader(Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext,System.String,System.String,System.Boolean)">
            <summary>
            Adds the transform which will append or set the request header.
            </summary>
        </member>
        <member name="M:Yarp.ReverseProxy.Transforms.RequestHeadersTransformExtensions.AddRequestHeaderRemove(Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext,System.String)">
            <summary>
            Adds the transform which will remove the request header.
            </summary>
        </member>
        <member name="M:Yarp.ReverseProxy.Transforms.RequestHeadersTransformExtensions.AddRequestHeadersAllowed(Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext,System.String[])">
            <summary>
            Adds the transform which will only copy the allowed request headers. Other transforms
            that modify or append to existing headers may be affected if not included in the allow list.
            </summary>
        </member>
        <member name="M:Yarp.ReverseProxy.Transforms.RequestHeadersTransformExtensions.AddOriginalHost(Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext,System.Boolean)">
            <summary>
            Adds the transform which will copy or remove the original host header.
            </summary>
        </member>
        <member name="T:Yarp.ReverseProxy.Transforms.RequestHeaderValueTransform">
            <summary>
            Sets or appends simple request header values.
            </summary>
        </member>
        <member name="M:Yarp.ReverseProxy.Transforms.RequestHeaderValueTransform.ApplyAsync(Yarp.ReverseProxy.Transforms.RequestTransformContext)">
            <inheritdoc/>
        </member>
        <member name="T:Yarp.ReverseProxy.Transforms.RequestHeaderXForwardedForTransform">
            <summary>
            Sets or appends the X-Forwarded-For header with the previous clients's IP address.
            </summary>
        </member>
        <member name="M:Yarp.ReverseProxy.Transforms.RequestHeaderXForwardedForTransform.#ctor(System.String,Yarp.ReverseProxy.Transforms.ForwardedTransformActions)">
            <summary>
            Creates a new transform.
            </summary>
            <param name="headerName">The header name.</param>
            <param name="action">Action to applied to the header.</param>
        </member>
        <member name="M:Yarp.ReverseProxy.Transforms.RequestHeaderXForwardedForTransform.ApplyAsync(Yarp.ReverseProxy.Transforms.RequestTransformContext)">
            <inheritdoc/>
        </member>
        <member name="T:Yarp.ReverseProxy.Transforms.RequestHeaderXForwardedHostTransform">
            <summary>
            Sets or appends the X-Forwarded-Host header with the request's original Host header.
            </summary>
        </member>
        <member name="M:Yarp.ReverseProxy.Transforms.RequestHeaderXForwardedHostTransform.#ctor(System.String,Yarp.ReverseProxy.Transforms.ForwardedTransformActions)">
            <summary>
            Creates a new transform.
            </summary>
            <param name="headerName">The header name.</param>
            <param name="action">Action to applied to the header.</param>
        </member>
        <member name="M:Yarp.ReverseProxy.Transforms.RequestHeaderXForwardedHostTransform.ApplyAsync(Yarp.ReverseProxy.Transforms.RequestTransformContext)">
            <inheritdoc/>
        </member>
        <member name="T:Yarp.ReverseProxy.Transforms.RequestHeaderXForwardedPrefixTransform">
            <summary>
            Sets or appends the X-Forwarded-Prefix header with the request's original PathBase.
            </summary>
        </member>
        <member name="M:Yarp.ReverseProxy.Transforms.RequestHeaderXForwardedPrefixTransform.ApplyAsync(Yarp.ReverseProxy.Transforms.RequestTransformContext)">
            <inheritdoc/>
        </member>
        <member name="T:Yarp.ReverseProxy.Transforms.RequestHeaderXForwardedProtoTransform">
            <summary>
            Sets or appends the X-Forwarded-Proto header with the request's original url scheme.
            </summary>
        </member>
        <member name="M:Yarp.ReverseProxy.Transforms.RequestHeaderXForwardedProtoTransform.#ctor(System.String,Yarp.ReverseProxy.Transforms.ForwardedTransformActions)">
            <summary>
            Creates a new transform.
            </summary>
            <param name="headerName">The header name.</param>
            <param name="action">Action to applied to the header.</param>
        </member>
        <member name="M:Yarp.ReverseProxy.Transforms.RequestHeaderXForwardedProtoTransform.ApplyAsync(Yarp.ReverseProxy.Transforms.RequestTransformContext)">
            <inheritdoc/>
        </member>
        <member name="T:Yarp.ReverseProxy.Transforms.RequestTransform">
            <summary>
            The base class for request transforms.
            </summary>
        </member>
        <member name="M:Yarp.ReverseProxy.Transforms.RequestTransform.ApplyAsync(Yarp.ReverseProxy.Transforms.RequestTransformContext)">
            <summary>
            Transforms any of the available fields before building the outgoing request.
            </summary>
        </member>
        <member name="M:Yarp.ReverseProxy.Transforms.RequestTransform.TakeHeader(Yarp.ReverseProxy.Transforms.RequestTransformContext,System.String)">
            <summary>
            Removes and returns the current header value by first checking the HttpRequestMessage,
            then the HttpContent, and falling back to the HttpContext only if
            <see cref="P:Yarp.ReverseProxy.Transforms.RequestTransformContext.HeadersCopied"/> is not set.
            This ordering allows multiple transforms to mutate the same header.
            </summary>
            <param name="context">The transform context.</param>
            <param name="headerName">The name of the header to take.</param>
            <returns>The requested header value, or StringValues.Empty if none.</returns>
        </member>
        <member name="M:Yarp.ReverseProxy.Transforms.RequestTransform.AddHeader(Yarp.ReverseProxy.Transforms.RequestTransformContext,System.String,Microsoft.Extensions.Primitives.StringValues)">
            <summary>
            Adds the given header to the HttpRequestMessage or HttpContent where applicable.
            </summary>
        </member>
        <member name="M:Yarp.ReverseProxy.Transforms.RequestTransform.RemoveHeader(Yarp.ReverseProxy.Transforms.RequestTransformContext,System.String)">
            <summary>
            Removes the given header from the HttpRequestMessage or HttpContent where applicable.
            </summary>
        </member>
        <member name="T:Yarp.ReverseProxy.Transforms.RequestTransformContext">
            <summary>
            Transform state for use with <see cref="T:Yarp.ReverseProxy.Transforms.RequestTransform"/>
            </summary>
        </member>
        <member name="P:Yarp.ReverseProxy.Transforms.RequestTransformContext.HttpContext">
            <summary>
            The current request context.
            </summary>
        </member>
        <member name="P:Yarp.ReverseProxy.Transforms.RequestTransformContext.ProxyRequest">
            <summary>
            The outgoing proxy request. All field are initialized except for the 'RequestUri' and optionally headers.
            If no value is provided then the 'RequestUri' will be initialized using the updated 'DestinationPrefix',
            'Path', and 'Query' properties after the transforms have run. The headers will be copied later when
            applying header transforms.
            </summary>
        </member>
        <member name="P:Yarp.ReverseProxy.Transforms.RequestTransformContext.HeadersCopied">
            <summary>
            Gets or sets if the request headers have been copied from the HttpRequest to the HttpRequestMessage and HttpContent.
            Transforms use this when searching for the current value of a header they should operate on.
            </summary>
        </member>
        <member name="P:Yarp.ReverseProxy.Transforms.RequestTransformContext.Path">
            <summary>
            The path to use for the proxy request.
            </summary>
            <remarks>
            This will be prefixed by any PathBase specified for the destination server.
            </remarks>
        </member>
        <member name="P:Yarp.ReverseProxy.Transforms.RequestTransformContext.Query">
            <summary>
            The query used for the proxy request.
            </summary>
        </member>
        <member name="P:Yarp.ReverseProxy.Transforms.RequestTransformContext.DestinationPrefix">
            <summary>
            The URI prefix for the proxy request. This includes the scheme and host and can optionally include a
            port and path base. The 'Path' and 'Query' properties will be appended to this after the transforms have run.
            </summary>
        </member>
        <member name="P:Yarp.ReverseProxy.Transforms.RequestTransformContext.CancellationToken">
            <summary>
            A <see cref="P:Yarp.ReverseProxy.Transforms.RequestTransformContext.CancellationToken"/> indicating that the request is being aborted.
            </summary>
        </member>
        <member name="T:Yarp.ReverseProxy.Transforms.ResponseCondition">
            <summary>
            Specifies the conditions under which a response transform will run.
            </summary>
        </member>
        <member name="F:Yarp.ReverseProxy.Transforms.ResponseCondition.Always">
            <summary>
            The transform runs for all conditions.
            </summary>
        </member>
        <member name="F:Yarp.ReverseProxy.Transforms.ResponseCondition.Success">
            <summary>
            The transform only runs if there is a successful response with a status code less than 400.
            </summary>
        </member>
        <member name="F:Yarp.ReverseProxy.Transforms.ResponseCondition.Failure">
            <summary>
            The transform only runs if there is no response or a response with a 400+ status code.
            </summary>
        </member>
        <member name="T:Yarp.ReverseProxy.Transforms.ResponseFuncTransform">
            <summary>
            A response transform that runs the given Func.
            </summary>
        </member>
        <member name="M:Yarp.ReverseProxy.Transforms.ResponseFuncTransform.ApplyAsync(Yarp.ReverseProxy.Transforms.ResponseTransformContext)">
            <inheritdoc/>
        </member>
        <member name="T:Yarp.ReverseProxy.Transforms.ResponseHeaderRemoveTransform">
            <summary>
            Removes a response header.
            </summary>
        </member>
        <member name="M:Yarp.ReverseProxy.Transforms.ResponseHeaderRemoveTransform.ApplyAsync(Yarp.ReverseProxy.Transforms.ResponseTransformContext)">
            <inheritdoc/>
        </member>
        <member name="T:Yarp.ReverseProxy.Transforms.ResponseHeadersAllowedTransform">
            <summary>
            Copies only allowed response headers.
            </summary>
        </member>
        <member name="M:Yarp.ReverseProxy.Transforms.ResponseHeadersAllowedTransform.ApplyAsync(Yarp.ReverseProxy.Transforms.ResponseTransformContext)">
            <inheritdoc/>
        </member>
        <member name="T:Yarp.ReverseProxy.Transforms.ResponseHeaderValueTransform">
            <summary>
            Sets or appends simple response header values.
            </summary>
        </member>
        <member name="M:Yarp.ReverseProxy.Transforms.ResponseHeaderValueTransform.ApplyAsync(Yarp.ReverseProxy.Transforms.ResponseTransformContext)">
            <inheritdoc/>
        </member>
        <member name="T:Yarp.ReverseProxy.Transforms.ResponseTrailerRemoveTransform">
            <summary>
            Removes a response trailer.
            </summary>
        </member>
        <member name="M:Yarp.ReverseProxy.Transforms.ResponseTrailerRemoveTransform.ApplyAsync(Yarp.ReverseProxy.Transforms.ResponseTrailersTransformContext)">
            <inheritdoc/>
        </member>
        <member name="T:Yarp.ReverseProxy.Transforms.ResponseTrailersAllowedTransform">
            <summary>
            Copies only allowed response trailers.
            </summary>
        </member>
        <member name="M:Yarp.ReverseProxy.Transforms.ResponseTrailersAllowedTransform.ApplyAsync(Yarp.ReverseProxy.Transforms.ResponseTrailersTransformContext)">
            <inheritdoc/>
        </member>
        <member name="T:Yarp.ReverseProxy.Transforms.ResponseTrailersFuncTransform">
            <summary>
            A response trailers transform that runs the given Func.
            </summary>
        </member>
        <member name="M:Yarp.ReverseProxy.Transforms.ResponseTrailersFuncTransform.ApplyAsync(Yarp.ReverseProxy.Transforms.ResponseTrailersTransformContext)">
            <inheritdoc/>
        </member>
        <member name="T:Yarp.ReverseProxy.Transforms.ResponseTrailersTransform">
            <summary>
            Transforms for response trailers.
            </summary>
        </member>
        <member name="M:Yarp.ReverseProxy.Transforms.ResponseTrailersTransform.ApplyAsync(Yarp.ReverseProxy.Transforms.ResponseTrailersTransformContext)">
            <summary>
            Transforms the given response trailers. The trailers will have (optionally) already been
            copied to the <see cref="T:Microsoft.AspNetCore.Http.HttpResponse"/> and any changes should be made there.
            </summary>
        </member>
        <member name="M:Yarp.ReverseProxy.Transforms.ResponseTrailersTransform.TakeHeader(Yarp.ReverseProxy.Transforms.ResponseTrailersTransformContext,System.String)">
            <summary>
            Removes and returns the current trailer value by first checking the HttpResponse
            and falling back to the value from HttpResponseMessage only if
            <see cref="P:Yarp.ReverseProxy.Transforms.ResponseTrailersTransformContext.HeadersCopied"/> is not set.
            This ordering allows multiple transforms to mutate the same header.
            </summary>
            <param name="context">The transform context.</param>
            <param name="headerName">The name of the header to take.</param>
            <returns>The response header value, or StringValues.Empty if none.</returns>
        </member>
        <member name="M:Yarp.ReverseProxy.Transforms.ResponseTrailersTransform.SetHeader(Yarp.ReverseProxy.Transforms.ResponseTrailersTransformContext,System.String,Microsoft.Extensions.Primitives.StringValues)">
            <summary>
            Sets the given trailer on the HttpResponse.
            </summary>
        </member>
        <member name="T:Yarp.ReverseProxy.Transforms.ResponseTrailersTransformContext">
            <summary>
            Transform state for use with <see cref="T:Yarp.ReverseProxy.Transforms.ResponseTrailersTransform"/>
            </summary>
        </member>
        <member name="P:Yarp.ReverseProxy.Transforms.ResponseTrailersTransformContext.HttpContext">
            <summary>
            The current request context.
            </summary>
        </member>
        <member name="P:Yarp.ReverseProxy.Transforms.ResponseTrailersTransformContext.ProxyResponse">
            <summary>
            The incoming proxy response.
            </summary>
        </member>
        <member name="P:Yarp.ReverseProxy.Transforms.ResponseTrailersTransformContext.HeadersCopied">
            <summary>
            Gets or sets if the response trailers have been copied from the HttpResponseMessage
            to the HttpResponse. Transforms use this when searching for the current value of a header they
            should operate on.
            </summary>
        </member>
        <member name="P:Yarp.ReverseProxy.Transforms.ResponseTrailersTransformContext.CancellationToken">
            <summary>
            A <see cref="P:Yarp.ReverseProxy.Transforms.ResponseTrailersTransformContext.CancellationToken"/> indicating that the request is being aborted.
            </summary>
        </member>
        <member name="T:Yarp.ReverseProxy.Transforms.ResponseTrailerValueTransform">
            <summary>
            Sets or appends simple response trailer values.
            </summary>
        </member>
        <member name="M:Yarp.ReverseProxy.Transforms.ResponseTrailerValueTransform.ApplyAsync(Yarp.ReverseProxy.Transforms.ResponseTrailersTransformContext)">
            <inheritdoc/>
        </member>
        <member name="T:Yarp.ReverseProxy.Transforms.ResponseTransform">
            <summary>
            Transforms for responses.
            </summary>
        </member>
        <member name="M:Yarp.ReverseProxy.Transforms.ResponseTransform.ApplyAsync(Yarp.ReverseProxy.Transforms.ResponseTransformContext)">
            <summary>
            Transforms the given response. The status and headers will have (optionally) already been
            copied to the <see cref="T:Microsoft.AspNetCore.Http.HttpResponse"/> and any changes should be made there.
            </summary>
        </member>
        <member name="M:Yarp.ReverseProxy.Transforms.ResponseTransform.TakeHeader(Yarp.ReverseProxy.Transforms.ResponseTransformContext,System.String)">
            <summary>
            Removes and returns the current header value by first checking the HttpResponse
            and falling back to the value from HttpResponseMessage or HttpContent only if
            <see cref="P:Yarp.ReverseProxy.Transforms.ResponseTransformContext.HeadersCopied"/> is not set.
            This ordering allows multiple transforms to mutate the same header.
            </summary>
            <param name="context">The transform context.</param>
            <param name="headerName">The name of the header to take.</param>
            <returns>The response header value, or StringValues.Empty if none.</returns>
        </member>
        <member name="M:Yarp.ReverseProxy.Transforms.ResponseTransform.SetHeader(Yarp.ReverseProxy.Transforms.ResponseTransformContext,System.String,Microsoft.Extensions.Primitives.StringValues)">
            <summary>
            Sets the given header on the HttpResponse.
            </summary>
        </member>
        <member name="T:Yarp.ReverseProxy.Transforms.ResponseTransformContext">
            <summary>
            Transform state for use with <see cref="T:Yarp.ReverseProxy.Transforms.ResponseTransform"/>
            </summary>
        </member>
        <member name="P:Yarp.ReverseProxy.Transforms.ResponseTransformContext.HttpContext">
            <summary>
            The current request context.
            </summary>
        </member>
        <member name="P:Yarp.ReverseProxy.Transforms.ResponseTransformContext.ProxyResponse">
            <summary>
            The proxy response. This can be null if the destination did not respond.
            </summary>
        </member>
        <member name="P:Yarp.ReverseProxy.Transforms.ResponseTransformContext.HeadersCopied">
            <summary>
            Gets or sets if the response headers have been copied from the HttpResponseMessage and HttpContent
            to the HttpResponse. Transforms use this when searching for the current value of a header they
            should operate on.
            </summary>
        </member>
        <member name="P:Yarp.ReverseProxy.Transforms.ResponseTransformContext.SuppressResponseBody">
            <summary>
            Set to true if the proxy should exclude the body and trailing headers when proxying this response.
            Defaults to false.
            </summary>
        </member>
        <member name="P:Yarp.ReverseProxy.Transforms.ResponseTransformContext.CancellationToken">
            <summary>
            A <see cref="P:Yarp.ReverseProxy.Transforms.ResponseTransformContext.CancellationToken"/> indicating that the request is being aborted.
            </summary>
        </member>
        <member name="T:Yarp.ReverseProxy.Transforms.ResponseTransformExtensions">
            <summary>
            Extensions for adding response header and trailer transforms.
            </summary>
        </member>
        <member name="M:Yarp.ReverseProxy.Transforms.ResponseTransformExtensions.WithTransformCopyResponseHeaders(Yarp.ReverseProxy.Configuration.RouteConfig,System.Boolean)">
            <summary>
            Clones the route and adds the transform which will enable or suppress copying response headers to the client response.
            </summary>
        </member>
        <member name="M:Yarp.ReverseProxy.Transforms.ResponseTransformExtensions.WithTransformCopyResponseTrailers(Yarp.ReverseProxy.Configuration.RouteConfig,System.Boolean)">
            <summary>
            Clones the route and adds the transform which will enable or suppress copying response trailers to the client response.
            </summary>
        </member>
        <member name="M:Yarp.ReverseProxy.Transforms.ResponseTransformExtensions.WithTransformResponseHeader(Yarp.ReverseProxy.Configuration.RouteConfig,System.String,System.String,System.Boolean,Yarp.ReverseProxy.Transforms.ResponseCondition)">
            <summary>
            Clones the route and adds the transform which will append or set the response header.
            </summary>
        </member>
        <member name="M:Yarp.ReverseProxy.Transforms.ResponseTransformExtensions.WithTransformResponseHeaderRemove(Yarp.ReverseProxy.Configuration.RouteConfig,System.String,Yarp.ReverseProxy.Transforms.ResponseCondition)">
            <summary>
            Clones the route and adds the transform which will remove the response header.
            </summary>
        </member>
        <member name="M:Yarp.ReverseProxy.Transforms.ResponseTransformExtensions.WithTransformResponseHeadersAllowed(Yarp.ReverseProxy.Configuration.RouteConfig,System.String[])">
            <summary>
            Clones the route and adds the transform which will only copy the allowed response headers. Other transforms
            that modify or append to existing headers may be affected if not included in the allow list.
            </summary>
        </member>
        <member name="M:Yarp.ReverseProxy.Transforms.ResponseTransformExtensions.AddResponseHeader(Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext,System.String,System.String,System.Boolean,Yarp.ReverseProxy.Transforms.ResponseCondition)">
            <summary>
            Adds the transform which will append or set the response header.
            </summary>
        </member>
        <member name="M:Yarp.ReverseProxy.Transforms.ResponseTransformExtensions.AddResponseHeaderRemove(Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext,System.String,Yarp.ReverseProxy.Transforms.ResponseCondition)">
            <summary>
            Adds the transform which will remove the response header.
            </summary>
        </member>
        <member name="M:Yarp.ReverseProxy.Transforms.ResponseTransformExtensions.AddResponseHeadersAllowed(Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext,System.String[])">
            <summary>
            Adds the transform which will only copy the allowed response headers. Other transforms
            that modify or append to existing headers may be affected if not included in the allow list.
            </summary>
        </member>
        <member name="M:Yarp.ReverseProxy.Transforms.ResponseTransformExtensions.WithTransformResponseTrailer(Yarp.ReverseProxy.Configuration.RouteConfig,System.String,System.String,System.Boolean,Yarp.ReverseProxy.Transforms.ResponseCondition)">
            <summary>
            Clones the route and adds the transform which will append or set the response trailer.
            </summary>
        </member>
        <member name="M:Yarp.ReverseProxy.Transforms.ResponseTransformExtensions.AddResponseTrailer(Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext,System.String,System.String,System.Boolean,Yarp.ReverseProxy.Transforms.ResponseCondition)">
            <summary>
            Adds the transform which will append or set the response trailer.
            </summary>
        </member>
        <member name="M:Yarp.ReverseProxy.Transforms.ResponseTransformExtensions.AddResponseTrailerRemove(Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext,System.String,Yarp.ReverseProxy.Transforms.ResponseCondition)">
            <summary>
            Adds the transform which will remove the response trailer.
            </summary>
        </member>
        <member name="M:Yarp.ReverseProxy.Transforms.ResponseTransformExtensions.WithTransformResponseTrailerRemove(Yarp.ReverseProxy.Configuration.RouteConfig,System.String,Yarp.ReverseProxy.Transforms.ResponseCondition)">
            <summary>
            Clones the route and adds the transform which will remove the response trailer.
            </summary>
        </member>
        <member name="M:Yarp.ReverseProxy.Transforms.ResponseTransformExtensions.WithTransformResponseTrailersAllowed(Yarp.ReverseProxy.Configuration.RouteConfig,System.String[])">
            <summary>
            Clones the route and adds the transform which will only copy the allowed response trailers. Other transforms
            that modify or append to existing trailers may be affected if not included in the allow list.
            </summary>
        </member>
        <member name="M:Yarp.ReverseProxy.Transforms.ResponseTransformExtensions.AddResponseTrailersAllowed(Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext,System.String[])">
            <summary>
            Adds the transform which will only copy the allowed response trailers. Other transforms
            that modify or append to existing trailers may be affected if not included in the allow list.
            </summary>
        </member>
        <member name="T:Yarp.ReverseProxy.Transforms.RouteConfigTransformExtensions">
            <summary>
            Extensions for adding transforms to <see cref="T:Yarp.ReverseProxy.Configuration.RouteConfig"/>.
            </summary>
        </member>
        <member name="M:Yarp.ReverseProxy.Transforms.RouteConfigTransformExtensions.WithTransform(Yarp.ReverseProxy.Configuration.RouteConfig,System.Action{System.Collections.Generic.IDictionary{System.String,System.String}})">
            <summary>
            Clones the <see cref="T:Yarp.ReverseProxy.Configuration.RouteConfig"/> and adds the transform.
            </summary>
            <returns>The cloned route with the new transform.</returns>
        </member>
        <member name="T:Yarp.ReverseProxy.Transforms.TransformBuilderContextFuncExtensions">
            <summary>
            Extension methods for <see cref="T:Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext"/>.
            </summary>
        </member>
        <member name="M:Yarp.ReverseProxy.Transforms.TransformBuilderContextFuncExtensions.AddRequestTransform(Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext,System.Func{Yarp.ReverseProxy.Transforms.RequestTransformContext,System.Threading.Tasks.ValueTask})">
            <summary>
            Adds a transform Func that runs on each request for the given route.
            </summary>
        </member>
        <member name="M:Yarp.ReverseProxy.Transforms.TransformBuilderContextFuncExtensions.AddResponseTransform(Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext,System.Func{Yarp.ReverseProxy.Transforms.ResponseTransformContext,System.Threading.Tasks.ValueTask})">
            <summary>
            Adds a transform Func that runs on each response for the given route.
            </summary>
        </member>
        <member name="M:Yarp.ReverseProxy.Transforms.TransformBuilderContextFuncExtensions.AddResponseTrailersTransform(Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext,System.Func{Yarp.ReverseProxy.Transforms.ResponseTrailersTransformContext,System.Threading.Tasks.ValueTask})">
            <summary>
            Adds a transform Func that runs on each response for the given route.
            </summary>
        </member>
        <member name="P:Yarp.ReverseProxy.Utilities.AtomicCounter.Value">
            <summary>
            Gets the current value of the counter.
            </summary>
        </member>
        <member name="M:Yarp.ReverseProxy.Utilities.AtomicCounter.Increment">
            <summary>
            Atomically increments the counter value by 1.
            </summary>
        </member>
        <member name="M:Yarp.ReverseProxy.Utilities.AtomicCounter.Decrement">
            <summary>
            Atomically decrements the counter value by 1.
            </summary>
        </member>
        <member name="M:Yarp.ReverseProxy.Utilities.AtomicCounter.Reset">
            <summary>
            Atomically resets the counter value to 0.
            </summary>
        </member>
        <member name="T:Yarp.ReverseProxy.Utilities.IClock">
            <summary>
            Abstraction over monotonic time providers
            (Environment.TickCount64, Stopwatch.GetTimestamp, as opposed to DateTime).
            </summary>
        </member>
        <member name="M:Yarp.ReverseProxy.Utilities.IClock.GetUtcNow">
            <summary>
            Gets the current time in UTC as a <see cref="T:System.DateTimeOffset"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Yarp.ReverseProxy.Utilities.IClock.TickCount">
            <summary>
            Gets a value that indicates the current tick count measured as milliseconds from an arbitrary reference time.
            The default implementation leverages <see cref="P:System.Environment.TickCount64"/>.
            This is generally more efficient than <see cref="M:Yarp.ReverseProxy.Utilities.IClock.GetStopwatchTime"/>, but provides less precision.
            </summary>
        </member>
        <member name="M:Yarp.ReverseProxy.Utilities.IClock.GetStopwatchTime">
            <summary>
            Gets a precise time measurement using <see cref="T:System.Diagnostics.Stopwatch"/> as the time source.
            </summary>
            <returns>The time measurement.</returns>
        </member>
        <member name="M:Yarp.ReverseProxy.Utilities.IClock.Delay(System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Creates a cancellable task that completes after a specified time interval.
            This is equivalent to <see cref="M:System.Threading.Tasks.Task.Delay(System.TimeSpan,System.Threading.CancellationToken)"/>,
            and facilitates unit tests that use virtual time.
            </summary>
            <param name="delay">The time span to wait before completing the returned task, or TimeSpan.FromMilliseconds(-1) to wait indefinitely.</param>
            <param name="cancellationToken">A cancellation token to observe while waiting for the task to complete.</param>
            <returns>A task that represents the time delay.</returns>
        </member>
        <member name="M:Yarp.ReverseProxy.Utilities.IClock.Delay(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Creates a cancellable task that completes after a specified time interval.
            This is equivalent to <see cref="M:System.Threading.Tasks.Task.Delay(System.Int32,System.Threading.CancellationToken)"/>,
            and facilitates unit tests that use virtual time.
            </summary>
            <param name="millisecondsDelay">The number of milliseconds to wait before completing the returned task, or -1 to wait indefinitely.</param>
            <param name="cancellationToken">A cancellation token to observe while waiting for the task to complete.</param>
            <returns>A task that represents the time delay.</returns>
        </member>
        <member name="T:Yarp.ReverseProxy.Utilities.IRandomFactory">
            <summary>
            Factory for creating random class. This factory let us able to inject random class into other class.
            So that we can mock the random class for unit test.
            </summary>
        </member>
        <member name="M:Yarp.ReverseProxy.Utilities.IRandomFactory.CreateRandomInstance">
            <summary>
            Create a instance of random class.
            </summary>
        </member>
        <member name="T:Yarp.ReverseProxy.Utilities.RandomFactory">
            <inheritdoc/>
        </member>
        <member name="M:Yarp.ReverseProxy.Utilities.RandomFactory.CreateRandomInstance">
            <inheritdoc/>
        </member>
        <member name="T:Yarp.ReverseProxy.Utilities.ValueStopwatch">
            <summary>
            Value-type replacement for <see cref="T:System.Diagnostics.Stopwatch"/> which avoids allocations.
            </summary>
            <remarks>
            Inspired on <seealso href="https://github.com/dotnet/extensions/blob/master/src/Shared/src/ValueStopwatch/ValueStopwatch.cs"/>.
            </remarks>
        </member>
        <member name="P:Yarp.ReverseProxy.Utilities.ValueStopwatch.Elapsed">
            <summary>
            Gets the time elapsed since the stopwatch was created with <see cref="M:Yarp.ReverseProxy.Utilities.ValueStopwatch.StartNew"/>.
            </summary>
        </member>
        <member name="M:Yarp.ReverseProxy.Utilities.ValueStopwatch.StartNew">
            <summary>
            Creates a new <see cref="T:Yarp.ReverseProxy.Utilities.ValueStopwatch"/> that is ready to be used.
            </summary>
        </member>
        <member name="P:Yarp.ReverseProxy.Utilities.ValueStringBuilder.RawChars">
            <summary>Returns the underlying storage of the builder.</summary>
        </member>
        <member name="M:Yarp.ReverseProxy.Utilities.ValueStringBuilder.Grow(System.Int32)">
            <summary>
            Resize the internal buffer either by doubling current buffer size or
            by adding <paramref name="additionalCapacityBeyondPos"/> to
            <see cref="F:Yarp.ReverseProxy.Utilities.ValueStringBuilder._pos"/> whichever is greater.
            </summary>
            <param name="additionalCapacityBeyondPos">
            Number of chars requested beyond current position.
            </param>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.InMemoryConfigProviderExtensions.LoadFromMemory(Microsoft.Extensions.DependencyInjection.IReverseProxyBuilder,System.Collections.Generic.IReadOnlyList{Yarp.ReverseProxy.Configuration.RouteConfig},System.Collections.Generic.IReadOnlyList{Yarp.ReverseProxy.Configuration.ClusterConfig})">
            <summary>
            Adds an InMemoryConfigProvider
            </summary>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.IReverseProxyBuilder">
            <summary>
            Reverse Proxy builder interface.
            </summary>
        </member>
        <member name="P:Microsoft.Extensions.DependencyInjection.IReverseProxyBuilder.Services">
            <summary>
            Gets the services.
            </summary>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.ReverseProxyServiceCollectionExtensions">
            <summary>
            Extensions for <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/>
            used to register the ReverseProxy's components.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.ReverseProxyServiceCollectionExtensions.AddHttpForwarder(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Registers the <see cref="T:Yarp.ReverseProxy.Forwarder.IHttpForwarder"/> service for direct forwarding scenarios.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.ReverseProxyServiceCollectionExtensions.AddReverseProxy(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Adds ReverseProxy's services to Dependency Injection.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.ReverseProxyServiceCollectionExtensions.LoadFromConfig(Microsoft.Extensions.DependencyInjection.IReverseProxyBuilder,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Loads routes and endpoints from config.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.ReverseProxyServiceCollectionExtensions.AddConfigFilter``1(Microsoft.Extensions.DependencyInjection.IReverseProxyBuilder)">
            <summary>
            Registers a singleton IProxyConfigFilter service. Multiple filters are allowed and they will be run in registration order.
            </summary>
            <typeparam name="TService">A class that implements IProxyConfigFilter.</typeparam>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.ReverseProxyServiceCollectionExtensions.AddTransforms(Microsoft.Extensions.DependencyInjection.IReverseProxyBuilder,System.Action{Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext})">
            <summary>
            Provides a callback that will be run for each route to conditionally add transforms.
            <see cref="M:Microsoft.Extensions.DependencyInjection.ReverseProxyServiceCollectionExtensions.AddTransforms(Microsoft.Extensions.DependencyInjection.IReverseProxyBuilder,System.Action{Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext})"/> can be called multiple times to
            provide multiple callbacks.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.ReverseProxyServiceCollectionExtensions.AddTransforms``1(Microsoft.Extensions.DependencyInjection.IReverseProxyBuilder)">
            <summary>
            Provides a <see cref="T:Yarp.ReverseProxy.Transforms.Builder.ITransformProvider"/> implementation that will be run for each route to conditionally add transforms.
            <see cref="M:Microsoft.Extensions.DependencyInjection.ReverseProxyServiceCollectionExtensions.AddTransforms``1(Microsoft.Extensions.DependencyInjection.IReverseProxyBuilder)"/> can be called multiple times to provide multiple distinct types.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.ReverseProxyServiceCollectionExtensions.AddTransformFactory``1(Microsoft.Extensions.DependencyInjection.IReverseProxyBuilder)">
            <summary>
            Adds a <see cref="T:Yarp.ReverseProxy.Transforms.Builder.ITransformFactory"/> implementation that will be used to read route transform config and generate
            the associated transform actions. <see cref="M:Microsoft.Extensions.DependencyInjection.ReverseProxyServiceCollectionExtensions.AddTransformFactory``1(Microsoft.Extensions.DependencyInjection.IReverseProxyBuilder)"/> can be called multiple
            times to provide multiple distinct types.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.ReverseProxyServiceCollectionExtensions.ConfigureHttpClient(Microsoft.Extensions.DependencyInjection.IReverseProxyBuilder,System.Action{Yarp.ReverseProxy.Forwarder.ForwarderHttpClientContext,System.Net.Http.SocketsHttpHandler})">
            <summary>
            Provides a callback to customize <see cref="T:System.Net.Http.SocketsHttpHandler"/> settings used for proxying requests.
            This will be called each time a cluster is added or changed. Cluster settings are applied to the handler before
            the callback. Custom data can be provided in the cluster metadata.
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.Builder.AppBuilderDelegationExtensions">
            <summary>
            Extensions for adding delegation middleware to the pipeline.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Builder.AppBuilderDelegationExtensions.UseHttpSysDelegation(Microsoft.AspNetCore.Builder.IReverseProxyApplicationBuilder)">
            <summary>
            Adds middleware to check if the selected destination should use Http.sys delegation.
            If so, the request is delegated to the destination queue instead of being proxied over HTTP.
            This should be placed after load balancing and passive health checks.
            </summary>
            <remarks>
            This middleware only works with the ASP.NET Core Http.sys server implementation.
            </remarks>
        </member>
        <member name="T:Microsoft.AspNetCore.Builder.AppBuilderHealthExtensions">
            <summary>
            Extensions for adding proxy middleware to the pipeline.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Builder.AppBuilderHealthExtensions.UsePassiveHealthChecks(Microsoft.AspNetCore.Builder.IReverseProxyApplicationBuilder)">
            <summary>
            Passively checks destinations health by watching for successes and failures in client request proxying.
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.Builder.AppBuilderLoadBalancingExtensions">
            <summary>
            Extensions for adding proxy middleware to the pipeline.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Builder.AppBuilderLoadBalancingExtensions.UseLoadBalancing(Microsoft.AspNetCore.Builder.IReverseProxyApplicationBuilder)">
            <summary>
            Load balances across the available endpoints.
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.Builder.IReverseProxyApplicationBuilder">
            <summary>
            An <see cref="T:Microsoft.AspNetCore.Builder.IApplicationBuilder"/> for building the `MapReverseProxy` pipeline.
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.Builder.DirectForwardingIEndpointRouteBuilderExtensions">
            <summary>
            Extension methods for <see cref="T:Microsoft.AspNetCore.Routing.IEndpointRouteBuilder"/> used to add direct forwarding to the ASP.NET Core request pipeline.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Builder.DirectForwardingIEndpointRouteBuilderExtensions.MapForwarder(Microsoft.AspNetCore.Routing.IEndpointRouteBuilder,System.String,System.String)">
            <summary>
            Adds direct forwarding of HTTP requests that match the specified pattern to a specific destination using default configuration for the outgoing request, default transforms, and default HTTP client.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Builder.DirectForwardingIEndpointRouteBuilderExtensions.MapForwarder(Microsoft.AspNetCore.Routing.IEndpointRouteBuilder,System.String,System.String,Yarp.ReverseProxy.Forwarder.ForwarderRequestConfig)">
            <summary>
            Adds direct forwarding of HTTP requests that match the specified pattern to a specific destination using customized configuration for the outgoing request, default transforms, and default HTTP client.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Builder.DirectForwardingIEndpointRouteBuilderExtensions.MapForwarder(Microsoft.AspNetCore.Routing.IEndpointRouteBuilder,System.String,System.String,Yarp.ReverseProxy.Forwarder.ForwarderRequestConfig,Yarp.ReverseProxy.Forwarder.HttpTransformer)">
            <summary>
            Adds direct forwarding of HTTP requests that match the specified pattern to a specific destination using customized configuration for the outgoing request, customized transforms, and default HTTP client.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Builder.DirectForwardingIEndpointRouteBuilderExtensions.MapForwarder(Microsoft.AspNetCore.Routing.IEndpointRouteBuilder,System.String,System.String,Yarp.ReverseProxy.Forwarder.ForwarderRequestConfig,Yarp.ReverseProxy.Forwarder.HttpTransformer,System.Net.Http.HttpMessageInvoker)">
            <summary>
            Adds direct forwarding of HTTP requests that match the specified pattern to a specific destination using customized configuration for the outgoing request, customized transforms, and customized HTTP client.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Builder.ReverseProxyConventionBuilder.Add(System.Action{Microsoft.AspNetCore.Builder.EndpointBuilder})">
            <summary>
            Adds the specified convention to the builder. Conventions are used to customize <see cref="T:Microsoft.AspNetCore.Builder.EndpointBuilder"/> instances.
            </summary>
            <param name="convention">The convention to add to the builder.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Builder.ReverseProxyConventionBuilder.ConfigureEndpoints(System.Action{Microsoft.AspNetCore.Builder.IEndpointConventionBuilder})">
            <summary>
            Configures the endpoints for all routes 
            </summary>
            <param name="convention">The convention to add to the builder.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Builder.ReverseProxyConventionBuilder.ConfigureEndpoints(System.Action{Microsoft.AspNetCore.Builder.IEndpointConventionBuilder,Yarp.ReverseProxy.Configuration.RouteConfig})">
            <summary>
            Configures the endpoints for all routes 
            </summary>
            <param name="convention">The convention to add to the builder.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Builder.ReverseProxyConventionBuilder.ConfigureEndpoints(System.Action{Microsoft.AspNetCore.Builder.IEndpointConventionBuilder,Yarp.ReverseProxy.Configuration.RouteConfig,Yarp.ReverseProxy.Configuration.ClusterConfig})">
            <summary>
            Configures the endpoints for all routes 
            </summary>
            <param name="convention">The convention to add to the builder.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.AspNetCore.Builder.ReverseProxyIEndpointRouteBuilderExtensions">
            <summary>
            Extension methods for <see cref="T:Microsoft.AspNetCore.Routing.IEndpointRouteBuilder"/>
            used to add Reverse Proxy to the ASP .NET Core request pipeline.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Builder.ReverseProxyIEndpointRouteBuilderExtensions.MapReverseProxy(Microsoft.AspNetCore.Routing.IEndpointRouteBuilder)">
            <summary>
            Adds Reverse Proxy routes to the route table using the default processing pipeline.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Builder.ReverseProxyIEndpointRouteBuilderExtensions.MapReverseProxy(Microsoft.AspNetCore.Routing.IEndpointRouteBuilder,System.Action{Microsoft.AspNetCore.Builder.IReverseProxyApplicationBuilder})">
            <summary>
            Adds Reverse Proxy routes to the route table with the customized processing pipeline. The pipeline includes
            by default the initialization step and the final proxy step, but not LoadBalancingMiddleware or other intermediate components.
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.Builder.AppBuilderSessionAffinityExtensions">
            <summary>
            Extensions for adding proxy middleware to the pipeline.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Builder.AppBuilderSessionAffinityExtensions.UseSessionAffinity(Microsoft.AspNetCore.Builder.IReverseProxyApplicationBuilder)">
            <summary>
            Checks if a request has an established affinity relationship and if the associated destination is available.
            This should be placed before load balancing and other destination selection components.
            Requests without an affinity relationship will be processed normally and have the affinity relationship
            established by a later component.
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.Builder.WebSocketsTelemetryExtensions">
            <summary>
            <see cref="T:Microsoft.AspNetCore.Builder.IApplicationBuilder"/> extension methods to add the <see cref="T:Yarp.ReverseProxy.WebSocketsTelemetry.WebSocketsTelemetryMiddleware"/>.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Builder.WebSocketsTelemetryExtensions.UseWebSocketsTelemetry(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            Adds a <see cref="T:Yarp.ReverseProxy.WebSocketsTelemetry.WebSocketsTelemetryMiddleware"/> to the request pipeline.
            Must be added before <see cref="T:Microsoft.AspNetCore.WebSockets.WebSocketMiddleware"/>.
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.Http.HttpContextFeaturesExtensions">
            <summary>
            Extension methods for fetching proxy configuration from the current HttpContext.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.HttpContextFeaturesExtensions.GetRouteModel(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            Retrieves the <see cref="T:Yarp.ReverseProxy.Model.RouteModel"/> instance associated with the current request.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.HttpContextFeaturesExtensions.GetReverseProxyFeature(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            Retrieves the <see cref="T:Yarp.ReverseProxy.Model.IReverseProxyFeature"/> instance associated with the current request.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.HttpContextFeaturesExtensions.GetForwarderErrorFeature(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            Retrieves the <see cref="T:Yarp.ReverseProxy.Forwarder.IForwarderErrorFeature"/> instance associated with the current request, if any.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.HttpContextFeaturesExtensions.ReassignProxyRequest(Microsoft.AspNetCore.Http.HttpContext,Yarp.ReverseProxy.Model.ClusterState)">
            <summary>
            Replaces the assigned cluster and destinations in <see cref="T:Yarp.ReverseProxy.Model.IReverseProxyFeature"/> with the new <see cref="T:Yarp.ReverseProxy.Model.ClusterState"/>,
            causing the request to be sent to the new cluster instead.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.HttpContextFeaturesExtensions.ReassignProxyRequest(Microsoft.AspNetCore.Http.HttpContext,Yarp.ReverseProxy.Model.RouteModel,Yarp.ReverseProxy.Model.ClusterState)">
            <summary>
            Replaces the assigned route, cluster, and destinations in <see cref="T:Yarp.ReverseProxy.Model.IReverseProxyFeature"/> with the new <see cref="T:Yarp.ReverseProxy.Model.RouteModel"/>
            and new <see cref="T:Yarp.ReverseProxy.Model.ClusterState"/>, causing the request to be sent using the new route to the new cluster.
            </summary>
        </member>
    </members>
</doc>
